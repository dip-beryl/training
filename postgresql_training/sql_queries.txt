File Name       : sql_queries.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

Data Types (PosgreSQL) :

    - Numeric Types :

        smallint    -> 2 bytes
        integer     -> 4 bytes
        bigint      -> 8 bytes

        decimal     -> variable
        numeric     -> variable


    - Monetary Types :

        money       -> 8 bytes


    - Charachter Types :

        varying(n), 
        varchar(n)
                    -> variable length with limit

        character(n), 
        char(n)
                    -> fixed-length, blank padded

        text
                    -> variable unlimited length


    - Binary Data Type :

        byte    
                    -> 1 to 4 byte + size of binary string
                    -> variable length binary string


    - Boolean :

        boolean      -> 1 byte, state true or false


    - Date / Time Types :

        timestamp [(p)]             -> 8 bytes, both date and time (no time zone)

        date                        -> 4 bytes, date (no time of day)

        interval [fields] [(p)]     -> 12 bytes, time interval


    - Enum :
       
        Enumerated (enum) types are data types that comprise a static, ordered set of values.

        Unlike other types, Enumerated Types need to be created using CREATE TYPE command

            * CREATE TYPE week AS ENUM ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');



---------------------------  PostgreSQL Queries  ------------------------------------

[ ';' -> this is used as a delimiter and query ending symbal.] 


CREATE DATABASE :

        * using sql query :

            CREATE DATABASE [databse_name];


-----Connecting / Selecting DATABASE : -----

        * from psql shell :
            
            \c [databse_name]

        * directly form terminal window :
            
            psql -h [HOST] -p [PORT] -U [USER] [DATABASE]
            
                Eg. sudo -su postgres psql -h localhost -p 5432 -U postgres testdb


DROP DATABASE :

        * SQL Query :

            DROP DATABASE [databse_name];


CREATE TABLE :

            CREATE TABLE [table_name]
                        (   column1 datatype,
                            column2 datatype,
                            .....
                            columnN datatype
                            );

        * Create table from another table :

            CREATE TABLE [new_table_name]
                AS
            SELECT column1, column2 ... columnN
                FROM [table_name];


DROP TABLE :

            DROP TABLE [table_name];


SCHEMA :

    A schema is a named collection of tables.
    A schema can also contain views, indexes, sequences, data types, operators, and functions.
    A schema is like a directory, except that it cannot be nested.

    A database can contain one or multiple schemas and each schema belongs to only one database.
    Two schemas can have different objects that share the same name.

    PostgreSQL automatically creates a schema called public for every new database.
    Whatever object you create without specifying the schema name, PostgreSQL will place it into this public schema

        * PosgreSQL command for schema creation :

            CREATE SCHEMA [schema_name];

        * access a table from specific schema :

            CREATE TABLE [schema_name.table_name];

            SELECT * FROM [schema_name.table_name] ;

        * drop a schema :

            DROP SCHEMA schema_name ;

            DROP SCHEMA schema_name CASCADE ;   (including all contained objects)

        * current_schema() function will return current schema :

            SELECT current_schema()


INSERT INTO :

        * when column names are mentioned or you want to put values to specific column only :

            INSERT INTO [table_name] 
                    (   column1,
                        column2,
                        .
                        .
                        columnN )
            VALUES
                    (
                        value1,
                        value2,
                        .
                        .
                        valueN );

        * when you are providing values for each column :

            INSERT INTO [table_name]
            VALUES
                    (
                        value1,
                        value2,
                        .
                        .
                        valueN );


SELECT :

        * Selecting the complete table :

            SELECT * FROM [table_name];

        * Selecting specific columns from any table :

            SELECT [column1, column2 .. columnN ] 
            FROM [table_name];


----- Operators -----

    Airthmetic Operators :

        +   |   Addition
        -   |   Subtraction
        *   |   Multiplication
        /   |   Division (returns Quotient)
        %   |   Division (returns Remainder)
        
        ^   |   Exponention (a ^ b)
        |/  |   Square Root (|/ 25 => 5)
        ||/ |   Cube Root (|/ 27 => 3)
        
        !   |   Factorial (5! => 120)
        !!  |   Factorial Prefix (!!5 => 120)

    Comparison Operators :

        =   | True if Equal
        !=  | True if Not-Equal
        <>  | True if Not-Equal
        >   | True if Left side is greater
        <   | True if Right side is greater
        >=  | True if Left side is greater or Equal
        <=  | True if Right side is greater or Equal

    Logical Operators :

        AND -> used with WHERE to create logics / expressions
        OR  -> used with WHERE to create logics / expressions
        NOT -> used with various commands to Reverse their meaning : NOT EXIST, NOT BETWEEN, NOT IN etc

    Bitwise Operators :

        &   |   Bitwise AND
        |   |   Bitwise OR
        ~   |   Bitwise Once Compliment
        <<  |   Bitwise Left Shift
        >>  |   Bitwise Right Shift
        #   |   Bitwise XOR















NOTE :

1. with every DROP command you can is use IF_EXIST to tackle errors.
        DROP [TABLE, DATABASE ....] IF_EXIST [name]









UPDATE :
DELETE
ALTER
UPSERT
INSET INTO

SELECT & FROM
ORDER BY
GROUP BY
LIKE
WHERE

SUM
MAX
AVG
COUNT

CASE & WHEN

Subquery and types

JOINS

VIEWS

Stored Procedure

IF statement

variables

functions
