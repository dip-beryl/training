File Name		: array_methods.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------

--------------------- Array Methods  (Baiscs)-----------------------

Creating Array :

    * To create a new array :

    Syntax  :   Array.new (size = 0, default = nill)

            > arr = []

            > arr = Array.new

            > Array.new(3)
            >> [nil, nil, nil]

            > Array.new(3, true)
            >> [true, true, true]

            > Array.new(3, 'yes')
            >> ['yes', 'yes', 'yes']


    Array.new(arr) :

            > arr = [10,20,"uwu"]
            > arr_2 = Array.new(arr)
            
            > print arr
            >> [10,20,"uwu"]

            > arr_2.equal? arr
            >> false


    * Creating array with blocks :
        
            > Hash.new
            >> {}

            > Array.new (3) { Hash.new }
            >> [{}, {}, {}]

            > Array.new (4) { |i| i.to_s }
            >> [1, 2, 3, 4]

    * Converting Hashes into Arrays :

            > Hash.new.to_a

            > Array(Hash.new)


            > arr = {:a => "a", :b => "b", :c => 30}
            > arr.to_a
                OR
            > Array(arr)
            
            >> [[:a, "a"], [:b, "b"], [:c, 30]]

---------------------------------------------------------------    
    
Accessing Elements :

            > arr = [10, 20, 30, 40, 50, 61, 71]

    * With Index :

            > arr[0]
            >> 10

            > arr[2]
            >> 30

            > arr[-1]
            >> 71

            > arr[100]
            >> nil

    * With Ranges :

            > arr[0..2]
            >> [10, 20, 30]

            > arr[0...2]
            >> [10, 20]

    * With (index, length) :

        Syntax : > Array[ start_index, length ]

            > arr[1, 3]
            >> [20, 30, 40]

            > arr[4, 2]
            >> [50, 61]

    * .at :

            > arr.at(2)
            >> 30

    * .fetch    :      It produces an error for out of bounds indexes. You can also specify the result when that happens.

            > arr.fetch(5)
            >> 61

            > arr.fetch(100)
            >> IndexError (index 100 outside of array bounds: -7...7)

            > arr.fetch(100, "opps")
            >> "oops"

            > arr.fetch(100, 999)
            >> 999

        - can be used with block to give out custom error. block will only execute in case of error

            > arr.fetch(100) { |i| puts "Index : #{i} is out of bonds"}
            >> Index : 100 is out of bonds

-------------------------
    * .index(obj)
      .index { block }   :   tries to find the index of specified object 

            > arr.index(30)
            >> 2

            > arr.index(100)
            >> nil

            > arr.index { |i| i > 30}
            >> 3

        .rindex(obj)
        .rindex { block }   :   same as .index but traverses in reverse order

            > [1, 2, 3, 4, 3, 4].rindex(4)
            >> 5

            > [1, 2, 3, 4, 3, 4].rindex(3)
            >> 4

            > [1, 2, 3, 4, 3, 4].rindex(30)
            >> nil

            > [1, 2, 3, 4, 3, 2, 4].rindex { |i| i == 2}
            >> 5
-------------------------            

    * .first, .last :

            > arr.first
            >> 10

            > arr.last
            >> 71

    * .first(n), .last(n) : creates a new array with n number of elements

            > arr.first(3)
            >> [10, 20, 30]

            > arr.last(2)
            >> [61, 71]

    * .take(n), .drop(n) :      both eturns new array

    .take(n) - returns the first [n ] elements.
    .drop(n) - skips the first [n ] elements and returns all left elements.

            > arr.take(3)
            >> [10, 20, 30]

            > arr.drop(2)
            >> [30, 40, 50, 61, 71]
-----------------------------------------------------------------------------------

Obtaining Infromation about an array :

    .length, .size and .count :

            > arr.count
            >> 7

            > arr.length
            >> 7

            > arr.size
            >> 7

    . empty? , .none?

            > arr.empty?
            >> false

    .include?

            > arr.include? (100)
            >> false

-------------------------------------------

Adding Items to an Array :

    .append(obj, ...)
    .push(obj, ...), 
    Array << obj    :   Adds the object in the [end ] of an array.

            > arr.push(5.78)
            >> [10, 20, 30, 40, 50, 61, 71, 5.78] 

            > arr << "Yes"
            >> [10, 20, 30, 40, 50, 61, 71, 5.78, "Yes"]

            > [1,2].push(5).push(6)
            >> [1,2,5,6]

            > [1,2].push(5,6,7)
            >> [1,2,5,6,7]

    .unshift(obj)   :   Adds the object in the starting of the array.

            > arr.unshift("start")
            >> ["start", 10, 20, 30, 40, 50, 61, 71, 5.78] 
            
    .insert(index, obj) :

            > arr.insert(3, "Three")
            >> >> ["start", 10, 20, "Three", 30, 40, 50, 61, 71, 5.78] 

            > arr.insert(5, 'A', 'B', 'C')
            >> ["start", 10, 20, "Three", 30, "A", "B", "C", 40, 50, 61, 71, 5.78, "Yes"]

-----------------------------------------------------------------------------------------------------

Removing Items :

    .pop    :   removes the last element in an array and returns it.
            :   modifies array

            > arr.pop
            >> "Yes"        # Array Structure Now : ["start", 10, 20, "Three", 30, "A", "B", "C", 40, 50, 61, 71, 5.78]

            > arr.pop
            >> 5.78        # Array Structure Now : ["start", 10, 20, "Three", 30, "A", "B", "C", 40, 50, 61, 71]

            > arr.pop(2)
            >> [61, 71]

    .shift  :   opposite of [.pop ], removes the starting element from the array and returns it.
            :   modifies array

            > arr.shift
            >> "start"      # Array Structure Now : [10, 20, "Three", 30, "A", "B", "C", 40, 50, 61, 71]

            > a = [1,2,3,4]
            > a.shift(2)
            >> [1,2]        # returns the removed elements

            > print a
            >> [3,4]


    .delete_at(index)   : deletes the element at the specified index and returns it.

            > arr.delete_at(2)
            >> "Three"           # Array Structure Now : [10, 20, 30, "A", "B", "C", 40, 50, 61, 71]


    .delete(obj)    :   all the occurences of the specified object will be delted from the array. and returns the object

            > arr.push(20, 30, 20)
            >> [10, 20, 30, "A", "B", "C", 40, 50, 61, 71, 20, 30, 20] 

            > arr.delete(20)
            >>  20                 # Array Structure Now : [10, 30, "A", "B", "C", 40, 50, 61, 71, 30] 


    .compact    : returns a array with removed [null ] values
    .compact!   : deletes the null elements from the current array

    .uniq :

            > arr.uniq
            >> [10, 30, "A", "B", "C", 40, 50, 61, 71]
            
            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------- Array Methods (Advanced) ----------------------------------------

[]  :

            > Array.[](10,20,"uwu")
            >> [10,20,"uwu"]

            > Array[10,20,"uwu"]
            >> [10,20,"uwu"]

            > [10,20,"uwu"]
            >> [10,20,"uwu"]

---------------

Array.try_convert(obj)  :   if the obj is an Array it will return the same array unless it will return nil
                            this method can be used to check if an argument is array or not

            > Array.try_convert( [2] ) 
            >> [2]

            > Array.try_convert( 2 )
            >> nil

-----------------

Intersection [&] :  returns the intersection of two arrays. (values that are in both the arrays)

    Syntax : arr1 & arr2

            > arr_1 = [10,20,30,40]
            > arr_2 = [30,40,50]

            > arr_1 & arr_2
            >> [30,40]


Multiply [* ] :

    * With Number :
        
            > arr_1 * 3
            >> [10,20,30,40,10,20,30,40,10,20,30,40]

    * With String :

        [ array * str ]
            and  
        [ arr.join(str) ] 
            is same

            > arr_1 * "-"
            >> "10-20-30-40"

            > arr_1 * ","
            >> "10,20,30,40"

            > [1, 2, 3].join("&")
            >> "1&2&3"


Addition [+] :  concatination

            > arr_1 + arr_2
            >> [10,20,30,40,30,40,50]


Subtraction / Difference [-] :  removes all the elemets from first array that matches second array. and returns first array

            > arr_1 - arr_2
            >> [10, 20]


Append / Push [<<] :

            > arr = [1,2,3]
            
            > arr << 4 << 5 << "a"
            >> [1, 2, 3, 4, 5, "a"]


Compare [ <=> ] :   returns 0 if a == b, returns 1 if a > b, returns -1 a < b, returns nil if a and  b cannot be compared; here [a] and [b] are two arrays

            > [ "a", "a", "c" ] <=> [ "a", "b", "c" ]   
            >> -1

            > [ 1, 2, 3, 4, 5, 6 ] <=> [ 1, 2 ]            
            >> +1

            > [ 1, 2 ] <=> [ 1, :two ]
            >> nil

            > [ 1, 2 ] <=> [ 1, 2 ]
            >> 0
            

Compare_2 [ == ] :  Two arrays are equal when their length is equal and each element is equal to coorosponding element with [==] operator.

            > [1, 2, 3, 'a', 'b', 'c'] == [1, 2, 3, 'a', 'b', 'c']
            >> true

            > [1, 2, 3, 'a', 'b', 'c'] == [1, 2, 3, 'a', 'b', 'd']
            >> false

            > [1, 2, 3, 'a', 'b', 'c'] == [1, 2, 3, 'a']
            >> false

-----------------------------------------

.push
.append :   pushing elements in the end.

            > arr = [1, 2, 3, 'a', 'b', 'c']

            > arr.append(5.5)
            >> [1, 2, 3, 'a', 'b', 'c', 5.5]


-------------------------------------

.assoc(obj)     : it works on an array whose elements are also arrays.
                    it searches for the [obj ] passed in the argument in the sub-arrays. and reurns the array where it is matched
                    it returns nil if no search found or the match found element is not an array.

            > s1 = [1, 2, 3]
              s2 = ['yes', 'also', 5.5]
              s3 = 'hello'
              s4 = ['hello_2']
            > arr = [s1, s2, s3, s4]
              
            > arr.assoc("yes")
            >> ['yes', 'also, 5.5]

            > arr.assoc(5)
            >> nil

            > arr. assoc('hello')
            >> nil

            > arr.assoc('hello_2')
            >> ['hello']

---------------------------------------

.clear  :   removes all the elements from the array

            > arr = [0,4,7,10,12]
            > arr.clear
            >> []

----------------------------------------

.collect
.map        :   invokes given blocks once for each item
            :   creates a new array by values returned by the block

            > arr = [ 1, 2, 3, 4, 5, 6, 7]

            > arr.collect { |x| x + 10}
            >> [11, 12, 13, 14, 15, 16, 17]

            > arr.map.with_index { |x, i| x * i}
            >> [0, 2, 6, 12, 20, 30, 47]

.collect!
.map!       : same but these are dangerous version of above methods.
            : they modifies the main array with new array and also returns it.


-------------------------------------

.combination(length)
.combination(length) { block }   :   can be used with a block returns all possible combination of array elements.
 
 *(permutation and combination)

            > arr = [1,2,3]

            > arr.combination(1).to_a
            >> [[1], [2], [3]]

            > arr.combination(2).to_a
            >> [[1, 2], [1, 3], [2, 3]]

            > arr.combination(5).to_a
            >> []

            > arr.combination(0).to_a
            >> [[]]

------
.repeated_combination(length)
.repeated_combination(length) { block }   :   returns repeated combinations

            > [1,2,3].repeated_combination(2).to_a
            >> [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 3]] 

--------------------------------

.concat(array1, array2, ....)     :   concat arrays

            > arr = [1,2,3]
            > arr1 = [10,20,30] 
            > arr2 = ['a','b','c']

            > arr.concat(arr1, arr2)
            >> [1, 2, 3, 10, 20, 30, 'a', 'b', 'c']

------------------------------------------------

.count              :   count all the elements in the array
.count (obj)        :   count the occurences of the specified object
.count { condition }:   count only elements according to the condition

            > arr = [10, 20, 30, 30, 40, 50, 5.5, 6.7]

            > arr.count
            >> 8

            > arr.count (30)
            >> 2

            > arr.count { |i| i>20 }
            >> 4

-------------------------------------

.cycle(n) {block }      :  calls the given block for elements [n ] times or forever if [n ] is nil.

            > arr = [1, 2, 3]

            > arr.cycle(3) { |i| print i," " }
            >> 1 2 3 1 2 3 1 2 3

--------------------------------------

.delete (obj) { block }    :    deletes all ocurrances of the specified object and modifies the array
                               :    block is returned if the object is not found to be removed
                               :    returns the delted item

            > arr = [10, 20, 30, 30, 40, 50, 5.5, 6.7]

            > arr.delete (30)
            >> 30
            > print arr
            >> [10, 20, 40, 50, 5.5, 6.7]

            > arr.delete ('x')
            >> nil

            > arr.delete ('x') { "not found"}
            >> "not found"


.delete_at (index)      :   deletes the object at specified index. returns the deleted item

            > arr.delete_at(5)
            >> 6.7
            > print arr
            >> [10, 20, 40, 50, 5.5]

            > arr.delete_at (100)
            >> nil

.reject {block }        :   does not modifies main array; all other working is same as .delete_if
.reject! {block }       :   completely same as .delete_if

.delete_if { block }    :   deletes every element of array for which block evaluates true
                        :   main array is modified as the blocks are executed with each iteration
                        :   returns new array

            > arr.delete_if {|i| i > 40}
            >> [10, 20, 40, 5.5]

----------------------------------------

.difference(array1, array2 ..)  :   returns the original array after removing all the occurances of elements that match the argument arrays

            > [1,1,1,2,3,4,4,5].difference([1, 2], [5])
            >> [3,4,4]

------------------------------------------------

.drop_while {block}     : returns a new array
                        : drop all the elements for which block returns true

            > arr = [10, 20, 30, 40, 51]

            > arr.drop_while { |i| i< 30}
            >> [30, 40, 51]

.take_while { block }   : returns new array
                        : returns all the elements for which the block returns true [opposite of .take_while]

            > arr = [10, 20, 30, 40, 51]

            > arr.take_while { |i| i< 30}
            >> [10, 20]

-----------------------------------

.each { block }     :   calls the given block once for each element, passing that element as parameter.
                    :   returns the array itself

            > arr = [ 1, 2, 3, 50]

            > arr.each { |i| print i, "## "}
            >> 1## 2## 3## 50##  => [1, 2, 3, 50] 


.each_index { block }   :   same as .each but passes the index of elements instead of the elements to the block

.reverse_each { block } :   same as .each but enumerates in reverse order.

------------------------------

.fill (obj)
.fill (obj, start, length)
.fill (obj, range)
.fill { block }
.fill (start, length) { block }
.fill(range) { block }              : fill filles the specified indexes with provided object. 
                                    : It modifies the main array.

            > arr = [1, 2, 3, 4, 5]

            > arr.fill("z")
            >> ['z', 'z', 'z', 'z', 'z']

            > arr. fill(1, 2, 2)
            >> ['z','z', 1, 1, 'z']

            > arr.fill(33, 1..4)
            >> ["z", 33, 33, 33, 33]

            > arr.fill { |i| i*i }
            >> [0, 1, 4, 9, 16]

            > arr.fill( 1, 3) { |i| i + 2}
            >> [0, 3, 4, 5, 16] 

            > arr.fill(0..2) { |i| i*i*i }
            >> [0, 1, 8, 5, 16]


-------------------------------------

.filter { block }
.select { block }   :   returns a new array containing all the elements for which the block will return [true ]

            > arr = [10, 20, 21, 33, 30]

            > arr.filter { |i| i.odd? }
            >> [21, 33]

            > arr.select {} |i| i.even? }
            >> [10, 20, 30]

.filter!
.select!    : returns the modified same array or nil

-------------------------------------

.find_index(obj)
.find_index { block }   : finds the index of the first match to the specified object and returns it 
                        : returns int or nil

            > arr = [1, 2, 3, 40, 50, 'a', 'a']
            
            > arr.find_index(3)
            >> 2

            > arr.find_index('a')
            >> 5

            > arr.find_index { |i| i > 10}
            >> 3

-------------------------------------------------

.flatten         :
.flatten (level) :  returns a new array with one dimensional flattening
                    
            > a = [1, 2, 3]
            > b = [a, 30, 40, 50]
            
            > arr = [a, b, 400, 500, 600]
            >> [[1, 2, 3], [[1, 2, 3], 30, 40, 50], 400, 500, 600]

            > arr.flatten
            >> [1, 2, 3, 1, 2, 3, 30, 40, 50, 400, 500, 600]

            > arr.flatten(1)
            >> [1, 2, 3, [1, 2, 3], 30, 40, 50, 400, 500, 600]

---------------------------------------------------

.hash       :   compute the hash of given array.
            :   two arrays with same content have same hash

            > [ 1, 2, 3,].hash
            >> -1902637927788762951

----------------------------------------------------

.initialize_copy (array_2)  :   
.replace (array_2)          :   replaces the contents of main array with passed array. Doing truncating or expending if needed

            > arr = [1, 2, 3]

            > arr.replace( [11, 22, 33] )
            >> [11, 22, 33]

            > print arr
            >> [11, 22, 33]

-----------------------------------------------------

.inspect
.to_s       :   creates a string of the array.

            > arr = [10, 20, 30]

            > arr.inspect
            > arr.to_s
            >> "[10, 20, 30]"

-----------------------------------------------------

.intersection( arr1, arr2, ....)        :   returns a new array containing elements common to main and passed arrays

            > [1, 2, 3].intersection( [3, 4, 5] )
            >> [3]

            > [1, 2, 3].intersection( [4, 2, 5], [2])
            >> [2]

            > [1, 2, 3].intersection( [4, 2, 5], [3])
            >> []

            > [1, 2, 3].intersection
            >> [1, 2, 3]

-------------------------------------------------------

.keep_if {block}        :   it is like .select
                        :   keeps every element for whome block returns true
                        :   it modifies the main array.

            > arr = [ 'a', 'b', 'c', 'd']

            > arr.keep_if { |i| i =~ /[aeiou]/ }
            >> ['a']

            > print arr
            >> ["a"]

--------------------------------------------------------

.max                    : returns object
.max { |a, b| block }   : returns object

        - .max compares objects through comparison operators first on character ank base ('x' > 'a') then on length base

            > arr = ["ha", "hello", "Animal", "x", "hsajnsqjwksasw"]
            
            > arr.max
            >> "x"

            > arr.max { |a, b| a <=> b}
            >> "x"

            > arr.max { |a, b| a.length <=> b.length}
            >> "hsajnsqjwksasw"

----------

.min                    : returns object
.min { |a, b| block }   : returns object

        - .min compares objects through comparison operators first on character ank base ('x' > 'a') then on length base

            > arr.min
            >> "Animal"

            > arr.min { |a, b| a <=> b}
            >> "Animal"

            > arr.min { |a, b| a.length <=> b.length}
            >> "x"


----------------------------------------------------------

.max(n)                    : returns array
.max(n) { |a, b| block }   : returns array

                > arr = ["ha", "hello", "Animal", "x", "hsajnsqjwksasw"]

                > arr.max(2)
                >> ["x", "hsajnsqjwksasw"] 
                
                > arr.max(3)
                >> ["x", "hsajnsqjwksasw", "hello"] 
                
                > arr.max(4)
                > ["x", "hsajnsqjwksasw", "hello", "ha"]

                > arr.max(2) { |a, b| a.length <=> b.length }
                >> ["hsajnsqjwksasw", "Animal"]


.min(n)                    : returns array
.min(n) { |a, b| block }   : returns array
            
                > arr.min(2)
                >> ["Animal", "ha"] 
                
                > arr.min(3)
                >> ["Animal", "ha", "hello"] 
                
                > arr.min(4)
                >> ["Animal", "ha", "hello", "hsajnsqjwksasw"]

                > arr.max(2) { |a, b| a.length <=> b.length }
                >> ["x", "ha"]

-----------------------------------------------------------------------------------------------

.minmax                         : returns two object array [obj, obj]
.minmax { |a, b| block }        : returns two object array [obj, obj]

                > arr.minmax
                >> ["Animal", "x" ]

-------------------------------------------------------------------------------


.one?           : returns true if the array have only one element.
.one? { block } :

                > [].one?
                >> false

                > [1].one?
                >> true

                > [1,1].one?
                >> false

---------------------------------------------------------------------------

.permutation {|p| block}        → ary
.permutation                    → Enumerator
.permutation(n) {|p| block}     → ary
.permutation(n)                 → Enumerator

        - Yiled all the permutation of length [n ]; when [n ] is not provided yield all the permutaions of all possible length.
                
                > arr = [1, 2, 44, 'a']

                > arr.permutation(2).to_a
                >> [[1, 2], [1, 44], [1, "a"], [2, 1], [2, 44], [2, "a"], [44, 1], [44, 2], [44, "a"], ["a", 1], ["a", 2], ["a", 44]]

-----------

.repeated_permutation(n)            → Enumerator
.repeated_permutation(n) { block }  → array

        - n = length
        - returns repeated permutaions

                > [1,2,3].repeated_permutation(2).to_a
                >> [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]]

----------------------------------------------------------------------

.product(array_2, ....)
.product(array_2, ....) { block }   :   returns an array of all combination with the pasing array.

                > [1,2].product( [3,4,5] )
                >>[[1,3],[1,4],[1,5], [2,3], [2,4], [2,5]]

                > [1,2].product( [3,4,5], [3,30])
                >>  [[1, 3, 3], [1, 3, 30], [1, 4, 3], [1, 4, 30], [1, 5, 3], [1, 5, 30], 
                    [2, 3, 3], [2, 3, 30], [2, 4, 3], [2, 4, 30], [2, 5, 3], [2, 5, 30], 
                    [3, 3, 3], [3, 3, 30], [3, 4, 3], [3, 4, 30], [3, 5, 3], [3, 5, 30]] 

-----------------------------------------------------------------------

.rassoc(obj)    : returns element_array or nil
                : compares the passed object with '2nd element' of elements that are arrays.


                > arr = [[1, "one"], [2, "two"], [3, "three"], ["ii", "two"], "four", ["five"], ["four", "five"], [1, 2, 3]]

                > arr.rassoc("two")
                >> [2, "two"]

                > arr.rassoc(2)
                >> [1,2,3]

                > arr.rassoc(1)
                >> nil

                > arr.rassoc("four")
                >> nil

                > arr.rassoc("five")
                >> nil

                > arr.rassoc(3)
                >> nil

-------------------------------------------------------------------------------

.reverse        : returns a new array containing elements n reverse order

                > [1, 2, 3, 4].reverse
                >> [4, 3, 2, 1]

.reverse!       : dangerous method form of reverse
                : returns and modifies the main array to be reversed

-----------------------------------------------------------------------------------

.rotate(count = 1)         : Returns a new array by rotating array so that the element at count is the first element of the new array.
                           : returns new array

                > arr = ['A', 'B', 'C', 'D']

                > arr.rotate
                >> ["B", "C", "D", "A"] 

                > arr.rotate(3)
                >> ["D", "A", "B", "C"]

                > arr.rotate(-2)
                >> ["C", "D", "A", "B"]

                > print arr
                >> ['A', 'B', 'C', 'D']
--------
.rotate!(count = 1)         : modifies main array

                > arr = ['A', 'B', 'C', 'D']

                > arr.rotate
                >> ["B", "C", "D", "A"] 

                > print arr
                >> ["B", "C", "D", "A"] 

----------------------------------------------------------------------------------------

sample      → obj
sample(n)   → new_ary

                > arr = [1,2,3,4,5,6,7,8,9,10]

                > arr.sample
                >> 7

                > arr.sample(4)
                >> [4, 3, 2, 8]

sample(random: rng)     → obj
sample(n, random: rng)  → new_ary

        - [random: ] argument is used as random seed

                > arr.sample(random: Random.new(1))
                >> 6

                > arr.sample(random: Random.new(1))
                >> 6

                > arr.sample(4, random: Random.new(1))
                >> [6, 10, 9, 2]

--------------------------------------------------------------------------------------------

.shuffle
.shuffle(random: rng)   :   shuffles the array and returns "new array"

                > arr = [1,2,3,4,5,6,7,8,9,10]

                > arr.shuffle
                >> [1, 8, 9, 6, 4, 7, 3, 5, 10, 2]

                > arr.shuffle(random: Random.new(2))
                >> [5, 2, 6, 1, 8, 3, 4, 7, 10, 9]
-------
.shuffle!
.shuffle!(random: rng)  :   same as .shuffle but in dangerous form
                        : modifies the main array

--------------------------------------------------------------------------------------------

.slice(index)           → obj or nil
.slice(start, length)   → new_ary or nil
.slice(range)           → new_ary or nil

        - .slice is an alias of [] slicing brackets.
        - they both works exactly the same
--------------

.slice!(index)     
.slice!(start, length)
.slice!(range)          : It works differently from .slice. returns the slices elements and deletes them from the main array
                        : drops all the elements that are mentioned in parameters and modifies the array
            
                > arr = [1,2,3,4,5,6]

                > arr.slice(2,3)
                >> [3,4,5]

                > print arr
                >> [1,2,6]

-----------------------------------------------------------------------------------------

sort                → new_ary
sort {|a, b| block} → new_ary
            
            - sort any array and returns new array
            - sorting is done by using <=> operator

                > arr = [1, 2, 6, 10, 3, 66, 7, 2, 0, 91]

                > arr.sort
                >> [0, 1, 2, 2, 3, 6, 7, 10, 66, 91]

                > arr.sort { |a, b| b <=> a}            #sorting in reverse
                >> [91, 66, 10, 7, 6, 3, 2, 2, 1, 0]

                > arr.sort.reverse!
                >> [91, 66, 10, 7, 6, 3, 2, 2, 1, 0]

                > arr
                >> [1, 2, 6, 10, 3, 66, 7, 2, 0, 91]

                    - values of the original array is intacted even when we used dangerous function of reverse!
                    - this happend because reverse! is working on returned value of .sort insted of main array.
-----------------
.sort! 
.sort! { |a, b| block } : dangerous version of .sort method.

-----------------------------------------------------------------------------------------------

.sort_by { |i| block }  :   new array

                > fruits = ["apple", "pear", "pineapple"]

                > fruits.sort_by { |i| i.length }
                >> ["pear", "apple", "pineapple"]

------------------------------------------------------------------------------------------------

.sum
.sum { block }

                > [].sum
                >> 0

                > [1,3,6].sum
                >> 10

                > [5,6].sum { |i| i*i }
                >> 61

-------------------------------------------------------------------------------------------------

.to_a
.to_ary     :   converts an object to array

-------------------------------------------------------------------------------------------------

.to_h
.to_h { |i| block } :   returns an array as {key, value} pair

        - we need an array of arrays to use .to_h

            > [1,2].to_h
            >> ERROR

            > [[1,2]].to_h
            >> {1 => 2}

            > [[1,"one"], [2, "two"]].to_h
            >> {1=>"one", 2=>"two"}

        - if we want to convert a flat array then, we need to use block

            > arr = ["one", "two", "three"]
            
            > arr.to_h { |i| [arr.index(i) , i] }
            >> {0=>"one", 1=>"two", 2=>"three"}

---------------------------------------------------------------------------------------------------

.transpose  :   transpose of an array, returns new array

            > [[1,2],[3,4],[5,6]].transpose
            >> [[1, 3, 5], [2, 4, 6]]

---------------------------------------------------------------------------------------------------

.union(array_1, array_2, ....)  :   union of arrays and returns new array

            > ["a", "b", "c"].union( ["b", "c", "d"] )
            >> ["a", "b", "c", "d"]

            > ["a"].union( ["a", "c", "d"], ["c","x"])
            >> ["a", "c", "d", "x"]

----------------------------------------------------------------------------------------------------

.uniq           :   returns new array conaining only unique items from main array (self)
.uniq { block } :   if the block is passed then it will use the result from block for comparison

            > [1,2,3,3,4,5,5].uniq
            >> [1, 2, 3, 4, 5]

            
            > b = [["student","sam"], ["student","george"], ["teacher","matz"]]
            
            > b.uniq {|s| s.first}
            >> [["student", "sam"], ["teacher", "matz"]]
------
.uniq!
.uniq! {block}  :   dangerous form of .uniq, modifies the main array.
                :   (only change) returns nil if no change occure

-----------------------------------------------------------------------------------------------------

.unshift(obj1, obj2, .....)
.prepend(obj1, obj2, .....) :   ads objects to he starting of array

            > arr = [1, 2, 3, 4]

            > arr.unshift(30, 41)
            >> [30, 41, 1, 2, 3, 4]

            > arr.prepend("a", "b")
            >> ["a", "b", 30, 41, 1, 2, 3, 4]

-----------------------------------------------------------------------------------------------------

.values_at(index(s))
.values_at(range(s))    :   returns a new array, containing only the elements from the main array whose indexes are mentioned in th parameter

            > a = %w{ a b c d e f }
            
            > a.values_at(1,3,4)
            >> ["b", "d", "e"]

            > a.values_at(1..3, 2..4)
            >> ["b", "c", "d", "c", "d", "e"]

-----------------------------------------------------------------------------------------------------
.zip(arg, ......)
.zip(arg,...) {block}   :   return new array

            a = [ 4, 5, 6 ]
            b = [ 7, 8, 9 ]

            > [1, 2, 3].zip(a, b)   
            >> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
            
            > [1, 2].zip(a, b)      
            >> [[1, 4, 7], [2, 5, 8]]

            > a.zip([1, 2], [8])    
            >> [[4, 1, 8], [5, 2, nil], [6, nil, nil]]

-----------------------------------------------------------------------------------------------------

set union |

            > ["A", "B", "C"] | ["C", "D", "A"]
            >> ["A", "B", "C", "D"]
            
--------------------------------------------------------------- Array Methods End -------------------------------------------------------------------------------
