File Name		: number_pre-defined_methods.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------

Numbers (n):

    .odd?       : returns true if number is odd
    .even?      : returns true if number is even
    .zero?      : returns true if zero

    .abs        : returns the absolute value

    .ceil       : returns the ceil rounded value
    .floor      : returns the floor rounded value
    .round      : returns rounded number to nearest
    .truncate   : returns the number after removing the after decimal degits (no rounding off happens)

    .integer?   : returns true for [integer] & [false] for any other including float    
    .to_f       : returns float converted
    .to_int     : returns integer converted
    
    f.finite?   : returns true if 'f' is finite
    f.infinite? : returns [1] if 'f' is positive infinite, [-1] if 'f' is negative infinite, nil if other

    .next, .succ    : returns the next number (n+1) [only for integrs]
    
    n.divmod(num)   : returns an array in format [quotient, reminder], here : n / num

        > 21.divmod(4)
        >> [5, 1]

    n.times { |n| ...}  : runs / iterates the block [n] times

        > 5.times { |i| puts "yes #{i}"}
        >> yes 0
           yes 1
           yes 2
           yes 3
           yes 4
    
    n.step( upto, step_count) { |n| ...}  : iterates the block from [n to upto]. INcrementing by step_count each time

        > 5.step(10, 2) {|i| puts i} 
        >> 5
           7
           9
    
---------------------------------------------------------------------------------------------------------------------------------
    

    

