File Name       : MVC_&_CRUD_rails.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------------------------------------------------------------------------------

1. Working on MVC with CRUD operations.

2. First we create a new Project.

3. Edit / Customize the "database.yml" file.

4. Generate new controller with views according CRUD standards i.e, (new, index, show, edit, delete)

5. Add Resourceful Routes, Root routes and any other customised routes.

6. Generate new Model and Migrations.

7. Create database, tables and add values with the help of ActiveRecord and ActiveRelations.

8. Edit the Controller Actions to get routing parameters and create variables and other features accordingly.

9. Edit Views and customize them according to the Controller Actions.

10. Implement all the CRUD Operations / Actions.

---------------------------------------------------------------------------------------------------------------------------------

-------------- New Project --------------------

    > rails new blog_system -d postgresql


------------- database.yml --------------------

    1. Mention the databse name (new or old)
    
    2. Uncomment username, password, host and port lines.

    3. Pass specified values for each of them for a successful connection.

        - the name of our database on which we will work : "blog_system_development"


------------ Creating Database ---------------

    1. If the database s old and already exist in your machine then skip this step.

    2. USE 
            $ rails db:create
            >> Created database 'blog_system_development'


----------- Running Server ------------------

    1. Running server to check if the connection was sucessful or not.

    2. To Start server :
            
            $ rails s

    3. Open Browser and Go to - http://localhost:3000

    4. If you see the Rails logo then the connection is successful.


----------- Controller and Views -----------------

    1. Generate new controller and views according to CRUD standards.

            $ rails g controller blogs new index edit show about

                >>
                create  app/controllers/blogs_controller.rb
                route  get 'blogs/new'
                        get 'blogs/index'
                        get 'blogs/edit'
                        get 'blogs/show'
                        get 'blogs/about'
                invoke  erb
                create    app/views/blogs
                create    app/views/blogs/new.html.erb
                create    app/views/blogs/index.html.erb
                create    app/views/blogs/edit.html.erb
                create    app/views/blogs/show.html.erb
                create    app/views/blogs/about.html.erb
                invoke  test_unit
                create    test/controllers/blogs_controller_test.rb
                invoke  helper
                create    app/helpers/blogs_helper.rb
                invoke    test_unit

----------- Model and Migrations -----------------

    1. Generate a new Model that will also create its Migration file.

    2. Also add its columns to the generate commands.

            $ rails g model blog title:string author:sring body:text

            >>
            invoke  active_record
            create    db/migrate/20220825052317_create_blogs.rb
            create    app/models/blog.rb
            invoke    test_unit
            create      test/models/blog_test.rb
            create      test/fixtures/blogs.yml


------------ Running Migrations --------------------

    1. Executing Migrate file "db/20220825052317_create_blogs.rb" to create table:

        $ rails db:migrate

        >>
        == 20220825052317 CreateBlogs: migrating ======================================
        -- create_table(:blogs)
        -> 0.1283s
        == 20220825052317 CreateBlogs: migrated (0.1285s) =============================

    2. Checking Status :

        $ rails db:migrate:status

        >>
        database: blog_system_development

        Status   Migration ID    Migration Name
        --------------------------------------------------
        up     20220825052317  Create blogs


------------- ActiveRecord and ActiveRelations -----------

    1. Switch to rails console 
        (rails console is same like irb console but with loaded rails packages and your project.)

        $ rails c

        >>
        3.0.0 :001 >

    2. Creating a model object and saving entry to DB with .create method:

        > blog_1 = Blog.create(title: "Apple", author: "Kashmir", body: "Apples are red in colour, and are very healthy. <br>An apple a day keeps the doctor away.")

        >>
        TRANSACTION (0.4ms)  
        BEGIN
            Blog Create (1.6ms)  
            INSERT INTO "blogs" ("title", "author", "body", "created_at", "updated_at") 
                VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["title", "Apple"], ["author", "Kashmir"], ["body", "Apples are red in colour, and are very healthy. <br>An apple a day keeps the doctor away."], ["created_at", "2022-08-25 09:50:52.799192"], ["updated_at", "2022-08-25 09:50:52.799192"]]
        TRANSACTION (18.5ms)  
        COMMIT
        => 
        #<Blog:0x00007f7f087a0a60

    3. Checking if the object is inserted in the table or not ?

        > blog_1.new_record?
        >> false

            - here false means its a not a new record and have been inserted one time in the table.

    4. Inserting more data :

        > blog_2 = Blog.create(title: "Startup Bubble", author: "Vishal Arora", body: "The Startup bubble is reaching its breaking point. <br>The stocks of Zomato and Paytm are already downfalling")

        > blog_3 = Blog.create(title: "One Nation One Charger", author: "Sumit Vyas", body: "Our governmet is thinking of a one nation one charger Ploicy. <br>In which iphone will also be included")

        > blog_4 = Blog.create(title: "Company who owns the world", author: "Tishu", body: "<b>Black Rock</b>. <br>BlackRock, Inc. is an American multi-national investment company based in New York City. <br>It is the world's largest asset manager, with US$10 trillion in assets under management as of January 2022.")


------------------- Routs Management ----------------------------------

--------------- Applying Resouceful Routes ----------------------------------

    1. Open config/routes.rb

        "routes.rb"
        -------------------------------
        Rails.application.routes.draw do
            get 'blogs/new'
            get 'blogs/index'
            get 'blogs/edit'
            get 'blogs/show'
            get 'blogs/about'
        end
        -------------------------------

    2. Deleteing all the routes related to CRUD operations and apply Resouceful Route insted.

        "routes.rb"
        -------------------------------
        Rails.application.routes.draw do
            
            resources: blogs

            get 'blogs/about'
        end
        -------------------------------

    3. Getitng routes table

        $ rails routes

            >>

            controller#Action       prefix          verb        URI Pattern
                                    
            blogs#about             root            GET         /
            blogs#about             blogs_about     GET         /blogs/about(.:format)
            blogs#index             blogs           GET         /blogs(.:format)
            blogs#create                            POST        /blogs(.:format)
            blogs#new               new_blog        GET         /blogs/new(.:format)
            blogs#edit              edit_blog       GET         /blogs/:id/edit(.:format)
            blogs#show              blog            GET         /blogs/:id(.:format)
            blogs#update                            PATCH       /blogs/:id(.:format)
            blogs#update                            PUT         /blogs/:id(.:format)
            blogs#destroy                           DELETE      /blogs/:id(.:format)


------------------------- CRUD Operations --------------------------

----------------------------- READ ----------------------------------

------------------------ INDEX ----------------------------------

    1. Setting controller "#index" to take all the values from the DB to make a list for the index.
        [creating a model object that contails all the enteries of blog table]

        "app/controllers/blogs_controller.rb"
        -------------------------------------
        def index

            @blogs_list = Blog.all
        end
        -------------------------------------

    2. Editing "index" view to take values from "#index" controller.

        "app/views/blogs/index.html.erb"
    -----------------------------------------------------------
        <% @title="Blogs & Vlogs" %>

        <center><h1>Blogs & Vlogs .com</h1></center>

        <% @blogs_list.each do |blog| %>
            <ul>
                <li>
                    <p> <%= link_to(blog.title, blog) %> </p>
                </li>
            </ul>
        <% end %>
    -------------------------------------------------------------

    2.1 For creating dynamic Page title variable "@title" :

        "app/views/layouts/application.html.erb"
        -----------------------------------------

        change : <title> BlogSystem </title>
        to     : <title> <%= @title %> </title>
        -----------------------------------------

    3. Run "rails s" and go to localhost:3000/blogs to execute the index view.


------------------------------- SHOW -------------------------------------------

    1. Setting controller "#show" to get per record information from blogs table.

        "app/controllers/blogs_controller.rb"
        -------------------------------------
        def show

            @blog = Blog.find(params[:id])
        end
        -------------------------------------

    2. Edit "show" view to get variables from #show action and present them accordingly:

        "app/views/blogs/show.html.erb"
    --------------------------------------------------------------------------
        <% @title=@blog.title %>

        <u><h3> <%= link_to("Blogs & Vlogs .com", blogs_path) %> </h3></u>

        <center> <h1> <%= @blog.title %> </h1></center>

        <center><p>  <%= sanitize @blog.body%> </p></center>

        <p align="right"> Written by -  <%= @blog.author%> </p>

    ----------------------------------------------------------------------------

    3. Running Server to view the pages.

        $ rails s

