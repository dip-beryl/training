File Name       : MVC_&_CRUD_rails.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------------------------------------------------------------------------------

1. Working on MVC with CRUD operations.

2. First we create a new Project.

3. Edit / Customize the "database.yml" file.

4. Generate new controller with views according CRUD standards i.e, (new, index, show, edit, delete)

5. Add Resourceful Routes, Root routes and any other customised routes.

6. Generate new Model and Migrations.

7. Create database, tables and add values with the help of ActiveRecord and ActiveRelations.

8. Edit the Controller Actions to get routing parameters and create variables and other features accordingly.

9. Edit Views and customize them according to the Controller Actions.

10. Implement all the CRUD Operations / Actions.

---------------------------------------------------------------------------------------------------------------------------------

-------------- New Project --------------------

    > rails new blog_system -d postgresql


------------- database.yml --------------------

    1. Mention the databse name (new or old)
    
    2. Uncomment username, password, host and port lines.

    3. Pass specified values for each of them for a successful connection.

        - the name of our database on which we will work : "blog_system_development"


------------ Creating Database ---------------

    1. If the database s old and already exist in your machine then skip this step.

    2. USE 
            $ rails db:create
            >> Created database 'blog_system_development'


----------- Running Server ------------------

    1. Running server to check if the connection was sucessful or not.

    2. To Start server :
            
            $ rails s

    3. Open Browser and Go to - http://localhost:3000

    4. If you see the Rails logo then the connection is successful.


----------- Controller and Views -----------------

    1. Generate new controller and views according to CRUD standards.

            $ rails g controller blogs new index edit show about

                >>
                create  app/controllers/blogs_controller.rb
                route  get 'blogs/new'
                        get 'blogs/index'
                        get 'blogs/edit'
                        get 'blogs/show'
                        get 'blogs/about'
                invoke  erb
                create    app/views/blogs
                create    app/views/blogs/new.html.erb
                create    app/views/blogs/index.html.erb
                create    app/views/blogs/edit.html.erb
                create    app/views/blogs/show.html.erb
                create    app/views/blogs/about.html.erb
                invoke  test_unit
                create    test/controllers/blogs_controller_test.rb
                invoke  helper
                create    app/helpers/blogs_helper.rb
                invoke    test_unit

----------- Model and Migrations -----------------

    1. Generate a new Model that will also create its Migration file.

    2. Also add its columns to the generate commands.

            $ rails g model blog title:string author:sring body:text

            >>
            invoke  active_record
            create    db/migrate/20220825052317_create_blogs.rb
            create    app/models/blog.rb
            invoke    test_unit
            create      test/models/blog_test.rb
            create      test/fixtures/blogs.yml


------------ Running Migrations --------------------

    1. Executing Migrate file "db/20220825052317_create_blogs.rb" to create table:

        $ rails db:migrate

        >>
        == 20220825052317 CreateBlogs: migrating ======================================
        -- create_table(:blogs)
        -> 0.1283s
        == 20220825052317 CreateBlogs: migrated (0.1285s) =============================

    2. Checking Status :

        $ rails db:migrate:status

        >>
        database: blog_system_development

        Status   Migration ID    Migration Name
        --------------------------------------------------
        up     20220825052317  Create blogs


------------- ActiveRecord and ActiveRelations -----------

    1. Switch to rails console 
        (rails console is same like irb console but with loaded rails packages and your project.)

        $ rails c

        >>
        3.0.0 :001 >

    2. Creating a model object and saving entry to DB with .create method:

        > blog_1 = Blog.create(title: "Apple", author: "Kashmir", body: "Apples are red in colour, and are very healthy. <br>An apple a day keeps the doctor away.")

        >>
        TRANSACTION (0.4ms)  
        BEGIN
            Blog Create (1.6ms)  
            INSERT INTO "blogs" ("title", "author", "body", "created_at", "updated_at") 
                VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["title", "Apple"], ["author", "Kashmir"], ["body", "Apples are red in colour, and are very healthy. <br>An apple a day keeps the doctor away."], ["created_at", "2022-08-25 09:50:52.799192"], ["updated_at", "2022-08-25 09:50:52.799192"]]
        TRANSACTION (18.5ms)  
        COMMIT
        => 
        #<Blog:0x00007f7f087a0a60

    3. Checking if the object is inserted in the table or not ?

        > blog_1.new_record?
        >> false

            - here false means its a not a new record and have been inserted one time in the table.

    4. Inserting more data :

        > blog_2 = Blog.create(title: "Startup Bubble", author: "Vishal Arora", body: "The Startup bubble is reaching its breaking point. <br>The stocks of Zomato and Paytm are already downfalling")

        > blog_3 = Blog.create(title: "One Nation One Charger", author: "Sumit Vyas", body: "Our governmet is thinking of a one nation one charger Policy. <br>In which iphone will also be included")

        > blog_4 = Blog.create(title: "Company who owns the world", author: "Tishu", body: "<b>Black Rock</b>. <br>BlackRock, Inc. is an American multi-national investment company based in New York City. <br>It is the world's largest asset manager, with US$10 trillion in assets under management as of January 2022.")


------------------- Routs Management ----------------------------------

--------------- Applying Resouceful Routes ----------------------------------

    1. Open config/routes.rb

        "routes.rb"
        -------------------------------
        Rails.application.routes.draw do
            get 'blogs/new'
            get 'blogs/index'
            get 'blogs/edit'
            get 'blogs/show'
            get 'blogs/about'
        end
        -------------------------------

    2. Deleteing all the routes related to CRUD operations and apply Resouceful Route insted.

        "routes.rb"
        -------------------------------
        Rails.application.routes.draw do
            
            root "blogs#index"

            resources: blogs

            get 'blogs/about'
        end
        -------------------------------

    3. Getitng routes table

        $ rails routes

            >>

            controller#Action       prefix          verb        URI Pattern
                                    
            blogs#about             root            GET         /
            blogs#about             blogs_about     GET         /blogs/about(.:format)
            blogs#index             blogs           GET         /blogs(.:format)
            blogs#create                            POST        /blogs(.:format)
            blogs#new               new_blog        GET         /blogs/new(.:format)
            blogs#edit              edit_blog       GET         /blogs/:id/edit(.:format)
            blogs#show              blog            GET         /blogs/:id(.:format)
            blogs#update                            PATCH       /blogs/:id(.:format)
            blogs#update                            PUT         /blogs/:id(.:format)
            blogs#destroy                           DELETE      /blogs/:id(.:format)


------------------------- CRUD Operations --------------------------

----------------------------- READ ----------------------------------

------------------------ INDEX ----------------------------------

    1. Setting controller "#index" to take all the values from the DB to make a list for the index.
        [creating a model object that contails all the enteries of blog table]

        "app/controllers/blogs_controller.rb"
        -------------------------------------
        def index

            @blog = Blog.all
        end
        -------------------------------------

    2. Editing "index" view to take values from "#index" controller.

        "app/views/blogs/index.html.erb"
    -----------------------------------------------------------
        <% @title="Blogs & Vlogs" %>

        <center><h1>Blogs & Vlogs .com</h1></center>

        <% @blog.each do |blog| %>
            <ul>
                <li>
                    <p> <%= link_to(blog.title, blog) %> </p>
                </li>
            </ul>
        <% end %>
    -------------------------------------------------------------

    2.1 For creating dynamic Page title variable "@title" :

        "app/views/layouts/application.html.erb"
        -----------------------------------------

        change : <title> BlogSystem </title>
        to     : <title> <%= @title %> </title>
        -----------------------------------------

    3. Run "rails s" and go to localhost:3000/blogs to execute the index view.


------------------------------- SHOW -------------------------------------------

    1. Setting controller "#show" to get per record information from blogs table.

        "app/controllers/blogs_controller.rb"
        -------------------------------------
        def show

            @blog = Blog.find(params[:id])
        end
        -------------------------------------

    2. Edit "show" view to get variables from #show action and present them accordingly:

        "app/views/blogs/show.html.erb"
    --------------------------------------------------------------------------
        <% @title=@blog.title %>

        <u><h3> <%= link_to("Blogs & Vlogs .com", blogs_path) %> </h3></u>

        <h3 align= "right"> <%= link_to "About Project", {action: "about"} %></h3>

        <center> <h1> <%= @blog.title %> </h1></center>

        <center><p>  <%= sanitize @blog.body%> </p></center>

        <br><br>

        <p> <b>Blog ID</b> -  <%= @blog.id%> </p>
        <p> <b>Written by</b> -  <%= @blog.author%> </p>

        <p> <b>Created on</b> -  <%= @blog.created_at%> </p>
        <p> <b>Modified on</b> -  <%= @blog.updated_at%> </p>
    -------------------------------------------------------------------------------

    3. Running Server to view the pages.

        $ rails s


--------------------------------------------- NEW -----------------------------------------------------

    1. Setting action "#new" :

        1.1 Even if you donot add anything in the #new action it will still works fine.

        1.2 But if we add [Model.new ] variable in the #new action then it will auto-fill the default values in our form.

        1.3 One moe use is that we can specify our customized auto-fill values for the form.

            "app/controllers/blogs_controller.rb"
            ---------------------------------------
            def new
                @blog_new = Blog.new
            end
            ---------------------------------------

                * can also use
                @blog_new = Blog.new(:author => "Anonymous")

                    - This will auto-fill the form field "author" with text "Annonymous"
                    - User can still edit the field

    2. Editing View : "Index", To create a hyperlink to "New" View.

        "app/views/blogs/index.html.erb"
        ---------------------------------------------------------------------------
        
        <p align= "center"> <%= link_to("Create New Blog", new_blog_path) %> </p>

        ----------------------------------------------------------------------------
            - append the above line in file.
    
    3. Editing View : to create a form

        "app/views/blogs/new.html.erb"
        -----------------------------------------------
        <% @title = "Create New Blog" %>

        <u><h3> <%= link_to("Blogs & Vlogs .com", blogs_path) %> </h3></u>

        <h2 align= "center"> Create New Blog </h2>

        <%= form_with model: @blog_new do |form| %>
            <div align= "center">
                <%= form.label :title %> <br>
                <%= form.text_field :title %>
            </div>

            <br>

            <div align= "center">
                <%= form.label :body %> <br>
                <%= form.text_area :body %>
            </div>
            
            <br>
            
            <div align= "center">
                <%= form.label :author %> <br>
                <%= form.text_field :author %>
            </div>

            <br>

            <div align= "center">
                <%= form.submit "Save Blog" %>
            </div>
        <% end %>
        ------------------------------------------------


------------------------------- CREATE ----------------------------------------------------

    1. When at "#new" action page someone presses the Submit/ Save Blog button.
        The data will go to params.
        Controller can access the data through:

        params[:model_name][:column_name]

        Eg:
            params[:blog][:title]

    2. We can pass these values to "Blog.new" to create a new entry in the database. 
         But, If we pass the unfiltered params[:blog] Hash directly to Article.new, 
         Rails will raise a "ForbiddenAttributesError" to alert us about the problem.

    3. This is because the entries need to permitted first with ".permit" method of params.
        - if the value is not permitted then it will not be added in the DB.

    4. Let's add a "private method" to the bottom of controller file that filters params.

        "app/controllers/blogs_controller.rb"
        ----------------------------------------------------
        private
            def blog_params
                params.require(:blog).permit(:title, :body, :author)
            end
        ------------------------------------------------------
            - This process is known as "Strong Parameters"

        4.1 If we remove ":author" from permit list.

            >> 
            Parameters: 
            {"authenticity_token"=>"[FILTERED]", 
             "blog"=>{"title"=>"Demo", 
                      "body"=>"This is a demo blog.", 
                      "author"=>"Anonymous"}, 
             "commit"=>"Save Blog"}
            
            Unpermitted parameter: :author. 

            - Above error will be there.
            - values will be saved but except author's value.

    5. Now Seting the "#create" to get values from private method "blog_params"

        "app/controllers/blogs_controller.rb"
        ----------------------------------------------------
        def create

            @blog_new = Blog.new(blog_params)

            if @blog_new.save
                redirect_to @blog_new
            else
                render :new, status: :unprocessable_entity
            end
        end
        ----------------------------------------------------

        - redirect_to will cause the browser to make a new request, whereas render renders the specified view for the current request.


----------------NEW & CREATE : Validations and Error Messages ----------------   

    1. Now we add process to handle invalid inputs and displaying of eror messages when this happen.

    2. This process happen in "Model" file with a feature called "validates".

        "app/models/blog.rb"
        ------------------------------------------------------------
        class Blog < ApplicationRecord

            validates :title, presence: true
            validates :body, presence: true, length: { minimum: 10}
        end
        -------------------------------------------------------------

            -The first validation declares that a title value must be present. 
                Because title is a string, this means that the title value must contain at least one non-whitespace character.

            - The second validation declares that a body value must also be present. 
                Additionally, it declares that the body value must be at least 10 characters long.


    3. Editing view of "new" to display error messages :

        "app/views/blogs/new.html.erb"
        -----------------------------------------------------------------
        <% @blog_new.errors.full_messages_for(:title).each do |message| %>
            <div style= "color:red"><%= message %></div>
        <% end %>
        --------------------------------------------------------------------

            - Appending the above code below the "form.text_field :title" code
            - Similarly, appending this code for "body text_area" after changing (:title) -> (:body)


    4. After this process the new page will have validations and error handling.
        and, will also do not accept invalid values / enteries.


------------------------------ EDIT & UPDATE -----------------------------------------

    1. "Edit & Update" is simlar to "New and Create". Both are a multi-step process.
        - It uses ".find and .update".

    2. First the #edit action will take values from model to display in the form.
        It will use the .find method to get the values.

        "app/controllers/blogs_controller.rb"
        ------------------------------------------
        def edit
            @blog_edit = Blog.find(params[:id])
        end
        -------------------------------------------

    3. Then the #update action will try to update and save the values. It also displays error if any happen. Same as #create action

        "app/controllers/blogs_controller.rb"
        ---------------------------------------------------
        def update
            @blog_edit = Blog.find(params[:id])

            if @blog_edit.update(blog_params)
                redirect_to @blog_edit
            else
                render :edit, status: :unprocessable_entity
            end
        end
        -----------------------------------------------------

    4. We also need to edit the "index" and "show" view for adding "edit buttons"

        "app/views/blogs/index.html.erb"
        -----------------------------------------------------
        <div align = "center">
        <table>
            <tr>
                <th> Blog Name </th>
                <th> Actions </th>
            </tr>

            <% @blog.each do |blog| %>
            <tr>
                <td> <li> <%= blog.title  %> </li> </td> 
                <td> <%= link_to("Show", blog) %> </td>
                <td> <%= link_to("Edit", edit_blog_path(blog)) %> </td>
                <td> <%= link_to("Delete", blog) %> </td>
            </tr>
            <% end %>
        </table>
        </div>
        ----------------------------------------------------------
            - changing the structure of index from "list" to "table" to implement action links / buttons.
            - setting "link_to" of edit to edit_blog_path

    5. The update action (re-)fetches the blogs from the database, 
        and attempts to update it with the submitted form data filtered by blog_params. 
        
        If no validations fail and the update is successful, the action redirects the browser to the blog's page. 
        Else, the action redisplays the form — with error messages — by rendering app/views/blogs/edit.html.erb

    6. The Form of "Edit and New" view is same 

        - The form builder automatically configures the form to make the appropriate kind of request, 
            based on whether the model object has been previously saved.

        - so we are going to share the same code for both views.
            With a concept called "Partials"

            6.1 Cut the "form code" from new.html.erb file and paste in a new file named:

                "app/views/blogs/_form.html.erb"

                - This file we be a shared view between new and edit.

            6.2 Add shared view "form" to New and Edit view.

                6.2.1
                    "app/views/blogs/new.html.erb"
                    ----------------------------------

                    <%= render "form", blog: @blog_new
                    ----------------------------------
                    
                6.2.2 
                    "app/views/blogs/edit.html.erb"
                    ----------------------------------

                    <%= render "form", blog: @blog_edit
                    ----------------------------------

            NOTE : A partial's filename must be prefixed with an underscore, e.g. _form.html.erb. 
                    But when rendering, it is referenced without the underscore, e.g. render "form"
                
                 : The above code is the same as our form in app/views/blogs/new.html.erb, except that all occurrences of @blog_new and @blog_edit have been replaced with blog.
                        Because partials are shared code, it is best practice that they do not depend on specific instance variables set by a controller action. 
                        Instead, we will pass the blog to the partial as a local variable.
                
    7. We are all set for editing records now. 



--------------------------------- Delete & Destroy -----------------------------------------------------

    1. To delete we simple need to connect the recor to the delete path.

    2. First we edit the controller.

        "app/controllers/blogs_controller.rb"
        -----------------------------------------------
        def destroy

            @blog = Blog.find(params[:id])

            @blog.destroy

            redirect_to root_path, status: :see_other
        end
        ------------------------------------------------

            - finding the record through .find
            - deleting the record.
            - redirecting to root route.
            - send a confirmation signal "303 see other".

    3. Editing the view:

        "app/views/blogs/index.html.erb"
        -------------------------------------------------------------------------------------------------------
        <%= link_to "Delete", blog_path(blog), data: {
                                                        turbo_method: :delete
                                                        turbo_confirm: "Are you sure?\nYou Want to delete '#{blog.title}' " } %>
        ---------------------------------------------------------------------------------------------------------------------------

            - the path of show, update and delete is same. i.e, blog_path
                - only difference is HTML method/verb i.e., GET, PUT and DELETE respectively.

            - the turbo method is as an alternative to JavaScript.
                - turbo_method: is used to change the html call/method to DELETE
                - turbo_confrim: is used to show a popup before the final deletion.



---------------- Making viwes more presentable --------------------------------

    1. Adding "Edit and Delete" hyperlinks to Blog's show page: 

        "app/views/blogs/show.html.erb"
        ------------------------------------------------------------------------------------------------------------------------------------------------
        <p align= "center"> <%= link_to("Edit This Blog", edit_blog_path(@blog)) %> </p>
        <p align= "center"> <%= link_to "Delete This Blog", blog_path(@blog), data: 
                                                                        {turbo_method: :delete,
                                                                        turbo_confirm: "Are You Sure?\nYou want to delete '#{@blog.title}' "}  %> </p>
        -------------------------------------------------------------------------------------------------------------------------------------------------

    2. Making the text-area of Body look bigger:

        "app/views/blogs/_form.html.erb"
        ---------------------------------------------------------
        <%= form.text_area :body, size: "50x6" %>
        ---------------------------------------------------------
            
            - using size: argument of form_with and text_area

    3. Adding about page link to each view

        ---------------------------------------------------------------------------
        <h3 align= "right"> <%= link_to "About Project", {action: "about"} %></h3>
        ----------------------------------------------------------------------------


----------------- Adding a Second Model ---------------------

------------------ Comments ----------------------------------

    1. Adding a second model to store the comments on the blog.

    2. Generating a model named "comment" :

        > $ rails g model comment name:string body:text blog:references
        >>
            invoke  active_record
            create    db/migrate/20220829123111_create_comments.rb
            create    app/models/comment.rb
            invoke    test_unit
            create      test/models/comment_test.rb
            create      test/fixtures/comments.yml

    3. Checking the model file for references:

        "app/models/comment.rb"
        -----------------------------------
        class Comment < ApplicationRecord
            belongs_to :blog
        end
        ------------------------------------
            - belongs_to :blog, which sets up an "Active Record" association
            
            - The (:references) keyword used in the shell command is a special data type for models.
            - It creates a new column on database model with the provided name appended with "_id" that will hold integer values

    4. Check the newly created migration file :

        "db/migrate/20220829123111_create_comments"
    -----------------------------------------------------------------
        class CreateComments < ActiveRecord::Migration[7.0]
        def change
            create_table :comments do |t|
            t.string :name
            t.text :body
            t.references :blog, null: false, foreign_key: true

            t.timestamps
            end
        end
        end
    -----------------------------------------------------------------
        - t.references :blog, will create a column named "blog_id"
        - this column will be linked to "id" column of "blogs" table.



----------------------- Migrating second model --------------------------------------
    
    1. Running migrations:

        $ rails db:migrate
        >>
            == 20220829123111 CreateComments: migrating ===================================
            -- create_table(:comments)
            -> 0.9221s
            == 20220829123111 CreateComments: migrated (0.9223s) ==========================

        $ rails db:migrate:status
        >>

            database: blog_system_development

            Status   Migration ID    Migration Name
            --------------------------------------------------
            up     20220825052317  Create blogs
            up     20220829123111  Create comments

    2. Checking schema file for better understanding:

        "db/schema.rb"
    ------------------------------------------------------------------
    create_table "blogs", force: :cascade do |t|
        t.string "title"
        t.string "author"
        t.text "body"
        t.datetime "created_at", null: false
        t.datetime "updated_at", null: false
    end

    create_table "comments", force: :cascade do |t|
        t.string "name"
        t.text "body"
        t.bigint "blog_id", null: false
        t.datetime "created_at", null: false
        t.datetime "updated_at", null: false
        t.index ["blog_id"], name: "index_comments_on_blog_id"
    end

    add_foreign_key "comments", "blogs"
    end
    ------------------------------------------------------------------
        - You can see blogs and comments are connected through foreign key.
        - and there is a table also named "blog_id" for foreign key connection.


---------------------------- Associating Models ------------------------------------------

    1. Active Record Association:

        1.1. They help in making relations between models / tables.

    2. In case of our project we can say.

        - one blog can have many comments.
        - Each comment will belong to atleast one blog.

    3. Editing model files for associations :

        3.1 We have already connected each entry in comments table to blogs table.

        3.2 Now we need to edit blogs model to add the other side of the association:

            "app/models/blog.rb"
        ------------------------------------------------------------
        class Blog < ApplicationRecord

            has_many :comments

            validates :title, presence: true
            validates :body, presence: true, length: {minimum: 10}
        end
        --------------------------------------------------------------
        
            - These two declarations enable a good bit of automatic behavior. (belong_to and has_many)
            
            -  Now, If you have an model object [ @blog ] containing a blog, 
                you can retrieve all the "comments" belonging to that blog as an [ array] using "@blog.comments".


-------------------------- Adding Routes for comments -----------------------------------------

    1. Resourceful Routes for comments:

        "config/routes.rb"
    -----------------------------
    resources :blogs do
        resources :comments
    end
    -----------------------------

    2. Creating the routes of comments like this will help in relationship heirarchy between blogs and comments.


