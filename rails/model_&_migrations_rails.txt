File Name       : model_&_migrations_Rails.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

--------------------------------------------------------------------------------------------

Models and Migrations :

    - Model and Migrations are used to modify databases.
    - With migration we generate a file that contains the code to create or manipulate DB.
    - With model we can run a special rails console in which we can write commands and execute them to manipilate DB.
    - These commands are known as ActiveRecord and ActiveRelations.

    - When we generate a model .. the migration file is auto-generated with it.
    - Only migration file can be generated seperately. But only model can not be. It always comes with the migration file.

            >  rails g model demo title:string body:text        
                # "title & body" are column names "string & text" are dtypes for DB.

                We can also provide column names as arguments. 
            >> 
            invoke  active_record
        --> create    db/migrate/20220819121247_create_demos.rb
        --> create    app/models/demo.rb
            invoke    test_unit
        --> create      test/models/demo_test.rb
        --> create      test/fixtures/demos.yml


------------------------------------------------------------------------

db/migrate:
File:: <time_stamp>_create_<model/migration_name>.rb
    [ Eg. 20220819125613_create_demos.rb ]

    - The migration file is used to manipulate database through the commands saved in it.
    - Basically Migration changes the state of DAtabase.
    - Moving a database state UP or DOWN.

    - Makes easy to create complete DB again in new machine and sharing of DB structure.
    - With Migration file we can make DB in ruby code.

        ------ auto geneated code -------

                    class CreateDemos < ActiveRecord::Migration[7.0]
                    def change
                        create_table :demos do |t|
                        t.string :title
                        t.text :body

                        t.timestamps
                        end
                    end
                    end

        -----------------------------------------
    - current code is to generate a table named "demos" with columns "title, body, timestamps"
    -------------------------------------------------

    Primary Key : an ID column is auto created with every "create_table" command.
    Time Stamps : Two columns named "created_on" and "updated_on" are created with command "t.timestamps" for the tracking purposes.

    --------------------------------------------------------------------

    Migration Methods : (some)

        - create_table
        - add_column
        
        - drop_table
        - remove_column
        
        - rename_table
        - rename_column
        
---------------------------------

Running Migrations :

    NOTE -to run/ execute this file, run in shell

        - This command will execute all the migration files. (that has not yet been run)

            > rails db:migrate

        - This will show status of DB up and down changes :
        
            > rails db:migrate:status

        - Runs migrate files upto specified verions; If "zero" then reverse all changes:

            > rails db:migrate VERSION = 0
            > rails db:migrate VERSION = 20220819125613


        - Other commands
            > rails db:create   : creates the DB mentioned in "database.yml"
            > rails db:drop     : drops the DB mentioned in "database.yml"

                # to create a dump file of current datatbase "db/schema.rb"
            > rails db:schema:dump

                # to load the dumb file "db/schema.rb"
            > rails db:schema:load

            > rails db:setup    
                -> db:create, db:schema:load, db:seed
            
            > rails db:reset
                -> db:drop, db:setup

            > rails db:migrate:reset
                -> db:drop, db:create, db:migrate
--
-- Operations:

        > rails db:create
            >> Created database 'practice_development'

        > rails db:migrate
            >> 
            == 20220819125613 CreateDemos: migrating ======================================
            -- create_table(:demos)
            -> 0.1063s
            == 20220819125613 CreateDemos: migrated (0.1066s) =============================

-----------------------------------------------------------------------

TABLE :: schema_migrations

    - When any migration file is ran. 
    - The migrations also create a seperate table to track the versions of migration files.
    - Named with "schema_migrations".

    - This table contains the verison of all the migration files.

|-----------------------------------------------------------------------------------------------------------------------------|
|-----------------------------------------------------------------------------------------------------------------------------|

Model :
    
    A model is a Ruby class that is used to represent data. 
    Additionally, models can interact with the application's database through a feature like :
            
            -> Active Record.
            -> Active Relation.

    - To access the model environment we will use :

            > rails console         # rails c
            OR
            > rails console -e development

    - We can make model objects here.
       ( Our model name is "demo" )

------------------------------------------------------------------------

---------------------------- ActiveRecord : -------------------------------------------------------------------

    - Allows us to retrieve and modify data as "objects".
    - These objects are smart and knows when to use INSERT< UPDATE or  DELETE.

------------
---- Creating a ActiveRecord object :

        Syntax:
            > obj_name = [model class name (from model file)].new

        Eg.:
            > t1 = Demo.new
                >> <Demo:0x00007fefb451dcd0 id: nil, title: nil, body: nil, created_at: nil, updated_at: nil> 

------------
---- Inserting values (through ActiveRecord objects ):

        - The object have column names as its methods.
        - We can use these column names to insert values
        
            > t1.title = "Samosa"
                >> "Samosa"
                # it was an INSERT operation

------------
---- Saving data in Databse :

        - When we create a object and insert / updates data in it it does not save in DB directly
        - To save data in DB we need to :

            > t1.save
                >>
                TRANSACTION (0.5ms)  
                BEGIN
                Demo Create (0.8ms)  
                INSERT INTO "demos" ("title", "body", "created_at", "updated_at") 
                    VALUES ($1, $2, $3, $4) 
                    RETURNING "id"  [["title", "Samosa"], ["body", nil], ["created_at", "2022-08-23 08:03:35.143445"], ["updated_at", "2022-08-23 08:03:35.143445"]]
                TRANSACTION (16.9ms)  
                COMMIT
                => true

------------
---- UPDATING data (through ActiveRecord)

            > t1.body = t1.body = "Samosa have aloo"
                >> "Samosa have aloo" 
                # it was an UPDATE operation

            > t1.save
                >>
                TRANSACTION (0.6ms)  
                BEGIN
                Demo Update (1.0ms)  
                UPDATE "demos" SET "body" = $1, "updated_at" = $2 
                    WHERE "demos"."id" = $3  [["body", "Samosa have aloo"], ["updated_at", "2022-08-23 08:06:32.874435"], ["id", 2]]
                TRANSACTION (21.5ms) 
                COMMIT
                => true 
------------
        " object.new(values) "
---- INSERTING values and Creating new object (together) :
            
            > t2 = Demo.new(title: "Dosa", body: "It is made of Rice Floor.")

                >> <Demo:0x0000562f550551b0 id: nil, title: "Dosa", body: "It is made of Rice Floor.", created_at: nil, updated_at: nil>
                    # the id and time stamp columns are auto generated by ActiveRecord when we .save the object.

            > t2.save
                >> 
                TRANSACTION (0.5ms)  
                BEGIN
                Demo Create (0.7ms)  
                INSERT INTO "demos" ("title", "body", "created_at", "updated_at") 
                    VALUES ($1, $2, $3, $4) 
                    RETURNING "id"  [["title", "Dosa"], ["body", "It is made of Rice Floor."], ["created_at", "2022-08-23 08:10:55.869911"], ["updated_at", "2022-08-23 08:10:55.869911"]]
                TRANSACTION (22.5ms)  
                COMMIT
                => true

------------
        " object.create(values) "
---- Saving Data, Creating object and Inserting values in one go.

            > t3 = Demo.create(title: "T-shirt", body: "It is a clothing item.")
                >>
                TRANSACTION (0.4ms)  
                BEGIN
                Demo Create (0.9ms)  
                INSERT INTO "demos" ("title", "body", "created_at", "updated_at") 
                    VALUES ($1, $2, $3, $4) RETURNING "id"  [["title", "T-shirt"], ["body", "It is a clothing item."], ["created_at", "2022-08-23 08:54:29.686260"], ["updated_at", "2022-08-23 08:54:29.686260"]]     
                TRANSACTION (18.1ms)  
                COMMIT
                => 
                #<Demo:0x0000562f549ae668 

------------
        " object.destroy "
---- Delete the object and its row :

            > t3.destroy
                >>
                TRANSACTION (0.5ms)  
                BEGIN
                Demo Destroy (0.9ms)  
                DELETE FROM "demos" 
                    WHERE "demos"."id" = $1  [["id", 5]]                                                      
                TRANSACTION (25.0ms)  
                COMMIT
                =>                                                                                                                                   
                #<Demo:0x0000562f549ae668  

------------
---- Viewing all entries of DB :
        " model_name.all "
            
            > Demo.all
                >>
                Demo Load (1.1ms)  
                SELECT "demos".* FROM "demos"
                =>                                                                         

                [#<Demo:0x00007f5b7c9fb148                                                  
                id: 2,                                                                    
                title: "Samosa",                                                          
                body: "Samosa have aloo",                                                 
                created_at: Tue, 23 Aug 2022 08:03:35.143445000 UTC +00:00,               
                updated_at: Tue, 23 Aug 2022 08:06:32.874435000 UTC +00:00>,              

                #<Demo:0x00007f5b7c9fa978                                                  
                id: 4,                                                                    
                title: "Dosa",                                                            
                body: "It is made of Rice Floor.",                        
                created_at: Tue, 23 Aug 2022 08:47:46.027515000 UTC +00:00,
                updated_at: Tue, 23 Aug 2022 08:47:46.027515000 UTC +00:00>] 

------------
---- Viewing a specific entrie of DB :
        " mdoel_name.find(id_number) "

            > Demo.find(2)
                >>
                Demo Load (0.7ms)  
                SELECT "demos".* FROM "demos" WHERE "demos"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]
                =>                                                         
                
                #<Demo:0x00007f5b7c45b288
                id: 2,
                title: "Samosa",
                body: "Samosa have aloo",
                created_at: Tue, 23 Aug 2022 08:03:35.143445000 UTC +00:00,
                updated_at: Tue, 23 Aug 2022 08:06:32.874435000 UTC +00:00> 
---------
    .new_record?

        - if the object is created but not saved then it will return true.

            > t1.new_record?
            >> false
                # beacause it was saved once before. therefore, it is not a new record.

---------
    " object.update(values) "

--------------------------------------------------------------------------------------------------------------------------------

---------------------------- ActiveRelations : -------------------------------------------------------------------

    - Also known as "Arel".
    - Simplifies the generation of complex database queries

    - Small queries can be chained (through objects)
    - Queries do not execue untill needed

        > r1 = Demo.where(title: "Samosa")

---- Chaining queries:
    
        > r1 = r1.order("title").limit(5)

    (These quereis will not executed untill any command or program needed the result from these queries.)

---- like :

        > r1.each { |result| ...}

        (if we try to execute the above block then the "r1"c query wil run in backgroud and provide the result to the block accordingly)

-----------------------------------------------------------------------------------------------------------------------------------------

## One-to-many Assosiations G-Drive Vid 5.7 ##