File Name       : model_&_migrations.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

--------------------------------------------------------------------------------------------


Models and Migrations :

    - Migrations are used to modify databases.

            >  rails g model demo title:string body:text        # "title & body" are column names "string & text" are dtypes for DB.
            >> 
            invoke  active_record
        --> create    db/migrate/20220819121247_create_demos.rb
        --> create    app/models/demo.rb
            invoke    test_unit
        --> create      test/models/demo_test.rb
        --> create      test/fixtures/demos.yml


------------------------------------------------------------------------

db/migrate:
File:: <time_stamp>_create_<model/migration_name>.rb
    [ Eg. 20220819125613_create_demos ]

    - The migration file is used to manipulate database.

------ auto geneated code -------

            class CreateDemos < ActiveRecord::Migration[7.0]
            def change
                create_table :demos do |t|
                t.string :title
                t.text :body

                t.timestamps
                end
            end
            end

-----------------------------------------

        we can modify this code to modify the data base.
        current code is to generate a table named "demos" with columns "title, body, timestamps"

    NOTE -to run/ execute this file, run in shell

            > rails db:migrate

-----------------------------------------------------------------------

> rails db:schema:dump        -> to create a dump file of current datatbase "db/schema.rb"

> rails db:seed
----------------------------------------------------------------------------

Model :
    
    A model is a Ruby class that is used to represent data. 
    Additionally, models can interact with the application's database through a feature of Rails called Active Record.

        TO access the model environment we will use :

            > rails console         # rails c
            OR
            > rails console -e development

    - We can make model objects here.
        Our model name is "demo"
        Model objects can be used for modifications in DB.

------------
----Creating a model object :

        Syntax:
            > obj_name = [First_letter_capital_table_name ].new(values of data base)

        This command will save the values acording to column name in obj_name.
        But, This command does not modify the database.

        To modify or save the values we need to use :

            > obj_name.save

        Eg.:

            > t1 = Demo.new(title: "Dipanshu", body: "He is a boy")
            >> #<Demo:0x0000558da144bfb8 id: nil, title: "Dipanshu", body: "He is a boy", created_at: nil, updated_at: nil> 
            
            > t1.save
            >> TRANSACTION (0.5ms)  
                BEGIN
                Demo Create (0.8ms)  INSERT INTO "demos" ("title", "body", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"  [["title", "Dipanshu"], ["body", "He is a boy"], ["created_at", "2022-08-22 05:23:55.669313"], ["updated_at", "2022-08-22 05:23:55.669313"]]
                TRANSACTION (16.9ms)  
                COMMIT                                                           
                
                true

    --------------------
    object.create
    --------------------

------------
----- Viewing all entries of DB :

            > table_name.all

            > Demo.all
------------
----- Viewing a specific entrie of DB :

            > Demo.find(id_number)

            > Demo.find(2)
------------
-----

-- Using controlller to print output from model to the view.

---     - in the "app/controller" :
            modify the function/action you want to be added to your view.

            > def index
                @list = Demos.all
            end

        -  after that you need to modify view of index:

    File :: index.html.erb

            ------------------------------
                <h1>Demo Blog</h1>

                <ul>
                <% @list.each do |i| %>
                    <li>
                    <%= i.title %>
                    </li>
                <% end %>
                </ul>
            -----------------------------

        - The above code is a mix of "html" and "erb".
        - Erb is used to execute ruby code inside HTML.

        - <% %> execute code
        - <%= %> execute and print output.
---------------------------------------------------------------------------------------------------------

CRUD :

    Almost all web applications involve CRUD (Create, Read, Update, and Delete) operations.


---- Route parameters :

        in route file add a new path :

            > get "/demo/:id", to: "demo#show"

        - this route transfers any link like "localhost.com/dmeo/4" to [show ] action in "demo" controller

        - [:id] is the routing parameters
        - to acces its value use params[:id]

        - we now make a show action in demo controller. Whose work is to show the blog according to id passsed.

            "demo_controller.rb"
            ------------------
            > def show
                @blog = Demo.find(params[:id])
            end
            ------------------

        - Create a new view "show.html.erb"
        - Edit the views accordingly to show the content according.

                "show.html.erb"
                ----------------
                > <h1> Blog View </h1>

                  <h2> <%= @blog.title %> </h2>
                  <p> <%= @blog.body %> </p>

                -----------------------------

---------------------------------------------------------------------------------------------------------------------------

    --- 4th and Last type of Routing ---

Resouceful Routing [imp.] :

