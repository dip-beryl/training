File Name       : rails/Installation_&_Basics.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------------
About:

    - Rails is a framwork based on ruby for web app development.

    - Rails philosophy includes mainly two things :
        
        1. Don't Repeat Yourself (DRY)   :  "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system"
                                             Do not write same information again and again.
        
        2. Convention over Configuration :  Prefer defaults.

--------------------------------------------------------------

Work Flow :

    - Rails work on Model-View-Controller (MVC)


    -- Typical :

            __________                          __________
           | Browser  |     ----------------->  | Web page |
           | _________|     <-----------------  | _________|




    -- MVC :
        
        1. Controller -> Handles Decision
        2. Model      -> Handles Data
        3. View       -> Handles Prsentation

            __________                           ____________                       ____________
           | Browser  |     ----------------->  | Controller |  -----------------> |    Model   |
           | _________|     <-----------------  | ___________|  <----------------- | ___________|
                ^
                |                                   |
                |                                   |
                |            __________             |
                |------------|  VIEW   |  <---------|
                             |_________|


        - Action Controller   -> Controller - Model
        - Action View         -> Controller - View
        - Active Record       -> Model - Database

        [Action Controller + Action View ==> Action PACK ]
    
---------------------------------------------------------------------------------------------------------------------

Installation_ :

        > gem install rails

        > rails --vrsion
        >> Rails 7.0.3.1

        > rails --help
-------------------------------------------------------

Generators :

    - Rails comes with a number of scripts called generators that are designed to make your development

        > rails new [app name ]
        > rails new --help

        > rails new simple_cms  #content management Systems

        OR

        > rails new blog

    (- this will create a new directory named same as your app name and have many sub-directories)

-------------------------------------------------------------------

Connection to DB :

    -d, [--database=DATABASE]

        > rails new [project_name] -d [database_client_name]
    
    - Preconfigure for selected database 
        (options: mysql/postgresql/sqlite3/oracle/sqlserver/jdbcmysql/jdbcsqlite3/jdbcpostgresql/jdbc)

        > rails new blog -d postgresql

--------------------------------------------------------------

File Structure :

        app     -> 95% of work will be here
        bin
        config  ->  configuration for application (connection to DB)
        db      ->  DB relates files, DB migrations, DB queries
        lib
        log     -> activity end error logs
        public  -> Anything goes here is public, fonts, error pages, 
        storage
        test    -> test for the project
        tmp
        vendor
        config.ru
        Gemfile     -> includes gems that the project is going to use
        Gemfile.lock
        Rakefile
        README.md

bin, lib, vendor --> can be used to store libraries but Gemfile cover most things

------------------------------------------------------------------------

Sub-File Structure :

    ----------------------------------------------------
    /app
        /assets      -> images and style sheets
        /channels
        /controllers ->
        /helpers     -> helping with views
        /javascript  -> used to be in /assets
        /jobs
        /mailers
        /models      ->
        /views       ->

    -------------------------------------------------------
    /config
        /environments       -> configurations for development, production and test envi.
        /initializers       -> mostly used, code run right at boot
        /locales
        application.rb      -> main file (but the developer mostly don't edit it)
        boot.rb
        cable.yml
        credentials.yml.enc
[IMP.]  database.yml        -> setup/edit database connection (for, developer, production and testing)
        environment.rb
        importmap.rb
        master.key
        puma.rb
        routes.rb
        storage.yml

            /environments
                development.rb      -> development environment settings (local machine)
                production.rb       -> production environment (server, for users)
                test.rb             -> for test environment settings (when we test our project)

----------------------------------------------------------------------------------------------------

Editing [config/database.yml ]:

    -- It contains the configuration of databse connection
    - user
    - password
    - port , etc.

    - Go to the file
    - check database name
    - uncomment the setting you want to edit 
        -- uncomment atleast user, password, and host
    - add /edit values.

---------------------------------------------------------------------------------------------------------

Strating a server :

        > rails server
        OR
        > rails s

    - Server address is : 
        -- http://127.0.0.1:3000
        -- http://localhost:3000

    - Port -> 3000

    - Stop Server -> "ctrl + c"

------------------------------------------------------------------------------------------------------------

Generators :

    Rails can generate differet types of things:

        application_record
        benchmark
        channel
        controller
        generator
        helper
        integration_test
        jbuilder
        job
        mailbox
        mailer
        migration
        model
        resource
        scaffold
        scaffold_controller
        system_test
        task

        

            > rails generate [GENERATOR TYPE] [name]


-> First we try genrate a [Controller ]

    - Controller name should be CamelCased or under_score. And you can pass a list of arguments as view names

            > rails genrate controller demo
            >> 
            --> create  app/controllers/demo_controller.rb
                invoke  erb
            --> create    app/views/demo
                invoke  test_unit
            --> create    test/controllers/demo_controller_test.rb
                invoke  helper
            --> create    app/helpers/demo_helper.rb
                invoke    test_unit

        - Above command created 3 files. and;
          1 folder for in app/views named same as controller "demo"

        - the [views/demo ] folder is empty because we did not provide view names as arguments in shell command.

--------------------
-> Ceate a Controller with Views as arguments [Controller-View ]

     (remember to delete files that were created in last command)

        > rails g controller demo index
        >>
            create  app/controllers/demo_controller.rb
            route  get 'demo/index'
            invoke  erb
            create    app/views/demo
            create    app/views/demo/index.html.erb
            invoke  test_unit
            create    test/controllers/demo_controller_test.rb
            invoke  helper
            create    app/helpers/demo_helper.rb
            invoke    test_unit

        - created 5 files and one folder.
        - 4 of the files and 1 folder is same as last shell command
        - 1 file that is new is the View "index.html.erb" that is created in [apps/views/demo ]folder
        - 1 new route is added to routes.rb file for the view "index"

        - You can execute your view in browser by accessing new route, just sppend the route in  "localhost:300"
            -> http://localhost:3000/demo/index

--------------------------------------

app/controller/
FILE :: [controller_name]_controller.rb         # demo.controller.rb

        - inherit everything from ApplicationController
        - Contains Methods

    Note -> Methods in Controller known as "Action "

---------------------------------------

app/views/
File :: demo/index.html.erb                     # demo = controller name, index = view name

        - contains the HTML code for this specific view

-----------------------------------------

config/
File :: routes.rb

        - contains the routes to redirect the browser request to which views or paths.
        - append the routes in "localhost:3000/" to run the routes files or views.

-------------------------------------------------------------------------------------------

Directory :: public

    - When we have any file in public and the browser or the webserver requestes for a file.
    - Firstly the files are searched in [public ] directory.
    - If the files are found then the request gets back [public ] only.
    - If the files are found in public the request do not access the [Rails Framework ].

Note - routes file will only get checked when the server canot find the files in public directory.
     - then router i.e, "routes.rb" reads the URl and send them the file accordingly.

    (--- Create a file in public about.html)

        - This file can be access through the "localhost:3000/about"
        - no need to mention "public/static" as the public directory is root directory of server.
        - no need to add .html extensions

--------------------------------------------------------------------------------------------

Routes and Routing :
File :: routes.rb

    - routes.rb contains the routing information.
    - routing information is the information of - to which URL w send which files.

    Types :
        1. Simple Match Route
        2. Default Route
        3. Root Route
        4. Resouceful Route

-------------------
    routes.rb:

            Rails.application.routes.draw do
            end
    ----------------

    -> the above block is the default block that is present in routes.rb
    -> any new route will be added in this block

    --> Adding Routes:

        -------------- 1. Simle Match Routes : ---------------------

            > match "demo/index", :to => "demo#index", :via => :get

        OR
                # if file from "demo" directory isn't mention then print the "index" i.e, default rire

            > get "demo/", to: "demo#index"
            > get "/demo", to: "demo#index"     

        OR

            > get "demo/index"        # this method only works when the view and action(method) name is same. here i.e, "index"
            > get "demo/hi", :to => "demo#hello"

        ---------------- 2. Default Routes : ------------------------

        - Matches according to the URL name automatically.
        - parantheses ()  shows that the these arguments are optional.
        
            > get ":controller(/:action(/:id))"

        ----------------- 3. Root Routes : --------------------------

        - Theiscome at the top of the block.
        - This is the path controller when the URL is root like google.com/ , localhost:3000/

                # root path
            > root "demo#index"
  
----------------------------------------------------------------------

Controller and Actions :

    render("path of view")        -> is used inside actions of controller files
                                  -> they are used to execute any other view then the default according tol action.

                > def index
                    render("demo/hello")
                end

                > render("hello")   #when the folder and controller is same

------------------------------------------------------------------------

Models and Migrations :

    - Migrations are used to modify databases.

            >  rails g model demo title:string body:text        # "title & body" are column names "string & text" are dtypes for DB.
            >> 
            invoke  active_record
        --> create    db/migrate/20220819121247_create_demos.rb
        --> create    app/models/demo.rb
            invoke    test_unit
        --> create      test/models/demo_test.rb
        --> create      test/fixtures/demos.yml


------------------------------------------------------------------------

db/migrate:
File:: <time_stamp>_create_<model/migration_name>.rb

    - The migration file is used to manipulate database.

------ auto geneated code -------

            class CreateDemos < ActiveRecord::Migration[7.0]
            def change
                create_table :demos do |t|
                t.string :title
                t.text :body

                t.timestamps
                end
            end
            end

-----------------------------------------

        we can modify this code to modify the data base.
        current code is to generate a table named "demos" with columns "title, body, timestamps"

    NOTE -to run/ execute this file, run in shell

            > rails db:migrate

-----------------------------------------------------------------------

> rails db:schema:dump        -> to create a dump file of current datatbase "db/schema.rb"

