File Name       : ActiveRecord_Callbacks.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------------------------------------------------------------------------------

1. Object and Its Life Cycle :

    - During the normal operation of a Rails application, objects may be created, updated, and destroyed. 
    
    - Active Record provides hooks into this object life cycle so that you can control your application and its data.

-------------------------

2. Callbacks :

    - Callbacks allow you to trigger logic before or after an alteration of an object's state.

    - Callbacks are methods that get called at certain moments of an object's life cycle
    
    - With callbacks it is possible to write code that will run whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database.


    2.1 Callback Registration

        - In order to use the available callbacks, you need to register them. 
        
        - You can implement the callbacks as ordinary methods 
        
        - Can use a macro-style class method to register them as callbacks:


            $ rails g migration CreateUsers name:string email:string contact:string status:boolean 

            $ rails db:migrate


        Example: create app/models/user.rb
        -----------------------------------------------------------------------
            class User < ApplicationRecord

                validates :name, :email, presence: true
                
                before_validation :ensure_name_has_a_value
                
                private
                    def ensure_name_has_a_value
                        if name.nil?
                            self.name = email unless email.blank?
                        end
                    end
            end
        --------------------------------------------------------------------------

            > u1 = User.create!(email: "")
            >> Validation failed: Name can't be blank, Email can't be blank (ActiveRecord::RecordInvalid)

            > u1 = User.create!(email: "user@mail.com")
            >>
                TRANSACTION (0.5ms)  
                BEGIN
                User Create (0.9ms)  
                    INSERT INTO "users" ("name", "email", "contact", "login", "created_at", "updated_at") 
                        VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"  [["name", "user@mail.com"], ["email", "user@mail.com"], ["contact", nil], ["login", nil], ["created_at", "2022-09-02 12:14:23.529178"], ["updated_at", "2022-09-02 12:14:23.529178"]]
                TRANSACTION (13.3ms)  
                COMMIT
                => 
                #<User:0x000055a4398a71d0

                    - here validation is passed because calbakc "before_validation" calls the method "ensure_name_has_a_value"
                            Which puts the same values of :email into :name if name donot have value

---------------------------------------------------------------------------------------------------------------------

3. Available Callbacks:

    3.1. Creating an Object
        
            before_validation
            after_validation
            before_save
            around_save
            before_create
            around_create
            after_create
            after_save
            after_commit / after_rollback

        ---------------------------------
    3.2 Updating an Object

            before_validation
            after_validation
            before_save
            around_save
            before_update
            around_update
            after_update
            after_save
            after_commit / after_rollback

        ------------------------------------
    3.3 Destroying an Object
            before_destroy
            around_destroy
            after_destroy
            after_commit / after_rollback


----------------------------------------------------------------------------------
Example on All callbacks :

    1. before_validation :

        - Defines a callback that will get called right before validation.

        Example :

            See above in 2.1

    
        ----------------------------------
    2. after_validation :

        - Defines a callback that will get called right after validation.

        
        Example:
        ----------------------------------------------------------
            class User < ApplicationRecord

                validates :name, :email, presence: true
                
                after_validation do
                    self.status = true unless(name.blank? and email.blank?)
                end
            end
        --------------------------------------------------------------------------

        > u1 = User.new(name: "Arun", email: "arun@mail.com")
        >> 
            #<User:0x000055f946d89420 id: nil, name: "Arun", email: "arun@mail.com", contact: nil, status: nil, created_at: nil, updated_at: nil> 
        
        > u1
        >> 
            #<User:0x000055f946d89420 id: nil, name: "Arun", email: "arun@mail.com", contact: nil, status: nil, created_at: nil, updated_at: nil> 
        
        > u1.valid?
        >> true 

        > u1
        >> 
            #<User:0x000055f946d89420 id: nil, name: "Arun", email: "arun@mail.com", contact: nil, status: true, created_at: nil, updated_at: nil> 


                - Here when we .new a object the :status column is nil because the record has yet don't know if its valid or not.

                - when we used .valid? it changes the value of :status to "true" as the record validness is confirmed now.

        ---------------------------
    