File Name       : ActiveRecord_Associations.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------------------------------------------------------------------------------

1. Associations Overview:

    - In Rails, an association is a connection between two Active Record models.

    - Because they make common operations simpler and easier in your code.

    Example:

        Each author can have many blogs. Without associations, the model declarations would look like this:

        Normal :
            ------------------------------------------------------
            class Author < ApplicationRecord
            end

            class Blog < ApplicationRecord
            end
            ------------------------------------------------------

            # creating a blog entry
            > @blog = Blog.create(published_at: Time.now, author_id: @author.id)

            # deleting an author an their blogs
            > @blogs = Blog.where(author_id: @author.id)

            > @blogs.each do |blog|
                blog.destroy
              end
            
            > @author.destroy


        With Associations :
            ------------------------------------------------------
                class Author < ApplicationRecord
                    has_many :blogs, dependent: :destroy
                end

                class Blog < ApplicationRecord
                    belongs_to :author
                end
            ------------------------------------------------------

            # creating a new blog entry
            > @blog = @author.blogs.create(published_at: Time.now)

            # deleting author and all its blogs
            > @author.destroy

    -------------------------------------------------------------------------------------------------------------

2. Types of Association :

    Rails support 6 types of association

    - belongs_to
    - has_one
    - has_many
    - has_many :through
    - has_one :through
    - has_and_belongs_to_many

    Associations are implemented using macro-style calls, so that you can declaratively add features to your models. 

        
        ------------
    2.1 belongs_to :

        - A "belongs_to" association sets up a connection with another model, such that each instance of the declaring model "belongs to" one instance of the other model.

        - When used alone, belongs_to produces a one-directional one-to-one connection. 
        
        - Therefore each blog in the above example "knows" its author, but the authors don't know about their blogs.

        - To setup a bi-directional association - use "belongs_to" in combination with a "has_one" or "has_many" on the other model.

        Example:

            Each Blog has one author.

            $ rails g migration CreateAuthorsAndBlogs

            Model file: "blog.rb"
            ----------------------------------------
                class Blog < ApplicationRecord
                    belongs_to :author
                end
            ----------------------------------------

            Migration file:
            ------------------------------------------------------
                class CreateAuthorsAndBlogs < ActiveRecord::Migration[7.0]
                    def change
                        
                        create_table :authors do |t|
                            t.string :name

                            t.timestamps
                        end

                        create_table :blogs do |t|
                            t.string :name
                            t.belongs_to: author, foreign_key: true
                            
                            t.timestamps
                        end
                    end
                end
            ------------------------------------------------------

                - When used alone, belongs_to produces a one-directional one-to-one connection. 
                
                - Therefore each blog in the above example "knows" its author, but the authors don't know about their blogs.

                - "belongs_to" does not ensure reference consistency. So its always best to also have a "foreign_key"


            NOTE: To setup a bi-directional association - use "belongs_to" in combination with a "has_one" or "has_many" on the other model.


            Inserting Data for cheking:

                > a1 = Author.create(name: "Raj Kumar")
                > a2 = Author.create(name: "Vijay Rana")


                    - Now we want to add a new blog of "Vijay Rana"

                > b1 = Blog.create(name: "Blog_1", author_id: 3)
                >>
                    TRANSACTION (0.5ms)  BEGIN
                    Author Load (0.5ms)  
                        SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 3], ["LIMIT", 1]]
                    TRANSACTION (0.4ms)  ROLLBACK

                        *- ROLLBACKed because foreign_key is not found.

                
                > b1 = Blog.create(name: "Blog_1", author_id: 2)
                >>
                    TRANSACTION (0.6ms)  BEGIN
                    Author Load (0.7ms)  
                        SELECT "authors".* FROM "authors" WHERE "authors"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]
                    Blog Create (1.8ms)  
                        INSERT INTO "blogs" ("name", "author_id", "created_at", "updated_at") 
                            VALUES ($1, $2, $3, $4) RETURNING "id"  [["name", "Blog_1"], ["author_id", 2], ["created_at", "2022-09-05 11:48:17.622306"], ["updated_at", "2022-09-05 11:48:17.622306"]]
                    TRANSACTION (29.0ms)  COMMIT


                    - Now, Because of the association we can find the name of any blog's author without joinning.

                > b1.author.name
                >> "Vijay Rana"

                    *- Because, Every blog belongs to an author.

                
                    - Adding another blog to same writer / author:
                
                > b2 = Blog.create(name: "Blog_2", author_id: 2)
                > b2.author.name
                >> "Vijay Rana"


        ------------------------------------------------------------------------------------------------------------
    
    2.2 has_one :

        - A "has_one" association indicates that one other model has a reference to this model. 
        
        - That model can be fetched through this association.

        - The main difference from belongs_to is that the link column is located in the other table:

        - Depending on the use case, you might also need to create a unique index and/or a foreign key constraint on the customer column for the accounts table.

        - This relation can be bi-directional when used in combination with "belongs_to" on the other model.


        Example:

            A bank where one customer can have only one account.

        Model files.
        ---------------------------------------------------------------
            class Customer < ApplicationRecord
                has_one :account
            end

            class Account < ApplicationRecord
            end
        ---------------------------------------------------------------

        $ rails g migration CreateCustomersAndAccounts


        ----------------------------------------------------------------------------------------------
            class CreateCustomersAndAccounts < ActiveRecord::Migration[7.0]
                def change
                    
                    create_table :customers do |t|
                        t.string :name
                        t.string :contact

                        t.timestamps
                    end

                    create_table :accounts do |t|
                        t.string :variant
                        t.string :amount
                        t.references :customer, index: {unique: true}, foreign_key: true


                    t.timestamps
                    end

                end
            end
        ----------------------------------------------------------------------------------------------

    2.3 has_many :

        - A "has_many" association is similar to "has_one", but indicates a one-to-many connection with another model

        - You'll often find this association on the "other side" of a belongs_to association.

        - This association indicates that "each instance of the model has zero or more" instances of another model.

        Example:

            Taking the Blog-Author table / model.

        Model :
        --------------------------------------------------------------------
            class Author < ApplicationRecord
                has_many :blogs, dependent: :destroy        
                
            end
            
            class Blog < ApplicationRecord
                    belongs_to :author
            end
        --------------------------------------------------------------------
            *- the dependent option makes sure that when we delete any author its all blogs are also deleted.

            - Now we can access blogs through authors.

        > author = Author.last

        > author.blogs.all
        >>

            Blog Load (1.0ms)  SELECT "blogs".* FROM "blogs" WHERE "blogs"."author_id" = $1  [["author_id", 2]]

            =>
            [#<Blog:0x0000564c8a4a0998
            id: 1,
            name: "Blog_1",
            author_id: 2,
            created_at: Mon, 05 Sep 2022 11:48:17.622306000 UTC +00:00,
            updated_at: Mon, 05 Sep 2022 12:17:33.764925000 UTC +00:00>,

            #<Blog:0x0000564c8a4a07b8
            id: 2,
            name: "Blog_2",
            author_id: 2,                      
            created_at: Mon, 05 Sep 2022 12:14:39.092795000 UTC +00:00,
            updated_at: Mon, 05 Sep 2022 12:17:36.728128000 UTC +00:00>]
            

        > author.destroy
        >> will delete the author and also all its blogs