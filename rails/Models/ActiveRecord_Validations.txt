File Name       : ActiveRecord_Validations.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------------------------------------------------------------------------------

1. Validation : (Overview)

    A simple validation example :
    
    ----------------------------------------
    class Book < ApplicationRecord
        validates :name, presence: true
    end
    ---------------------------------------

        > irb > Person.create(name: "John Doe").valid?
        >> true

        > irb>  Person.create(name: nil).valid? 
        >> false

-------------------------------------------------------------------------

2. Types of Validations :


    There are different ways of validations :

        - Databse specific validation: 
                                        Useful but roadblocks in texting. 
                                        Useful when man application is using same DB.

        - Client Side Validations :
                                    Good to provide quick feedback to client.
                                    But, can be bypassed if Javascript is off.

        - Controller Based Validation :
                                        Becomes difficult to maintain and test.



        - Model-level validations are the best way to ensure that only valid data is saved into your database. 
            They are database agnostic, cannot be bypassed by end users, and are convenient to test and maintain

----------------------------------------------------------------------------------------------------------------------

3. Triggering of Validations :

    - There are methods who trigger validations and There are methods who not.


    3.1

    Example -> Demo.create

    - They all trigger the validatiions 

        .create
        .create!
        .save
        .save!
        .update
        .update!

        - the Bang versions will raise an exception in case record is invalid.

        - update returns object all other returns boolean.


    - There can two type of objects in ActiveRecord:
        
        * belongs to record 
        * do not belongs

            - When a record is newly creaded it doesn't belong to any record (.new)
            - When the record is save it belongs to a record.


            .new_record?
                        : is used to find if a record is new or old(belongs to record).


    3.2 Skipping Validations :

        decrement!
        decrement_counter
        increment!
        increment_counter
        insert
        insert!
        insert_all
        insert_all!
        toggle!
        touch
        touch_all
        update_all
        update_attribute
        update_column
        update_columns
        update_counters
        upsert
        upsert_all

        - They all skip validations :

        - (.save) also ski[ps valiudations when used like: 

                    : .save(validate: false)

        ------------------------------
    3.3 .valid? and .invalid?

        - When an object's record is saved into DB all the validations run automatically by ActiveRecord on object data.

        - You can run these validations on your own.

            > b1 = Book.new(name: "c++")
            > b2 = Book.new(name: nil)

            > b1.valid?
            >> true

            > b2.valid?
            >> false

        -------------------------------------

    --------------------------------------------------------------------------------------------------------------------------

4. Validation Helpers :

    1. Active Record offers many pre-defined validation helpers that you can use directly inside your class definitions.

    2. These helpers provide common validation rules. Every time a validation fails, an error is added to the object's errors collection

    3. Each helper accepts an arbitrary number of attribute names, so with a single line of code you can add the same kind of validation to several attributes.

    4. All of them accept the ":on" and ":message" options, which define when the validation should be run and what message should be added to the errors collection if it fails

    5. The :on option takes one of the values :create or :update

    6. There is a default error message for each one of the validation helpers



    4.1. acceptance:

        - This method validates that a checkbox on the user interface was checked when a form was submitted.

        - * Default Message: "must be accepted"

        - It can also receive an :accept option, which determines the allowed values that will be considered as accepted. 
            
            It defaults to ['1', true] and can be easily changed.


            $ rails g migration AddTermsOfServiceToBooks terms_of_service:boolean
            
            $ rails db:migrate

            
            -----------------------------------------------
            class Book < ApplicationRecord

                #validates :terms_of_service, acceptance: true
                validates :terms_of_service, acceptance: {message: "Please accept t&c"}
              
                #validates :eula, acceptance: {accept: "Yes"}
                validates :eula, acceptance: {accept: [1, True]}
            end
            --------------------------------------------------

        NOTE : This validation is very specific to web applications and this 'acceptance' does not need to be recorded anywhere in your database. 
        
                If you don't have a field for it, the helper will create a virtual attribute. 
                If the field does exist in your database, the accept option must be set to or include "true" or else the validation will not run.

        --------------------------------------------------------------------
    
    4.2 validates_associated
    
        - You should use this helper when your model has associations with other models and they also need to be validated.

        - When you try to save your object, valid? will be called upon each one of the associated objects.

        - Don't use validates_associated on both ends of your associations. They would call each other in an infinite loop.

        - Deafult Message: "is invalid"

        Example :
        --------------------------------------------
            class Library < ApplicationRecord
                has_many :books
                validates_associated :books
            end
        --------------------------------------------

    4.3 confirmation :

        - Used when two fields needs to matched like passwords.

        - This helper method creates a "virtual field" with [main_field_name]_confirmation appended.

        - Dafult message : "doesn't match confirmation"

            --------------------------------------------
            class Book < ApplicationRecord
                
                validates :email, confirmation: true
                validates :email_conformation, presence: true

                validates :email, confirmation: {case_sensitive: false}
            end
            --------------------------------------------
                    * This check is performed only if "email_confirmation" is not [nil ]
                    * so make sure to add a presence check in _confirmation column.

                    * an option of case_sensitive is also present


            Inside View:
            -----------------------------------------------------------
                <%= text.field :book, :email%>
                <%= text.field :book, :email_confirmation%>
            -----------------------------------------------------------
        
        -------------
    4.4 comparison :

        - It is used to compare values of two columns. ( The values must be comparable ).

        
        
        ------------------------------------------------------        
        class Book < ApplicationRecord

            validates :isbn, comparison: {greater_than: 100}
            
            #validates :isbn, comparison: {greater_than: :id}
        end
        ------------------------------------------------------   

        Options:

            :greater_than
            :greater_than_or_equal_to
            :equal_to
            :less_than
            :less_than_or_equal_to

            :other_than  : Specifies the value must be other than the supplied value. 
                            The default error message for this option is "must be other than %{count}".

        
        ------------
