File Name       : ActiveRecord_Migrations.txt
Author          : Dipanshu Ranga (@dip-beryl)
Organization    : Beryl Systems Pvt. Ltd.

----------------------------------------------------------------------------------------------------------------------------

1. Migration (Overview) :

    1.1. Rails provides a "domain-specific language" (DSL) for managing a "database schema" called -- Migrations. 
    
    1.2. Migrations are stored in files which are executed against any database that "Active Record" supports using [rake ].
        -> "project/db/migrate/..."
    
    
    - Example of a migration that "creates a table":

    ---------------------------------------------------------------------
    |                                                                   |
    |   class CreatePublications < ActiveRecord::Migration[7.0]         |
    |       def change                                                  |
    |           create_table :publications do |t|                       |
    |           t.string :title                                         |
    |           t.text :description                                     |
    |           t.references :publication_type                          |
    |           t.integer :publisher_id                                 |
    |           t.string :publisher_type                                |
    |           t.boolean :single_issue                                 |
    |                                                                   |
    |           t.timestamps                                            |
    |           end                                                     |
    |           add_index :publications, :publication_type_id           |
    |       end                                                         |
    |   end                                                             |
    ---------------------------------------------------------------------

    1.3. Migrations help us to manipulate databases without the need of SQL.
    
    1.4. You can think of each migration as being a new 'version' of the database. 
    
    1.5. A schema starts off with nothing in it.
        - With each migration executes - it add or remove tables, columns, or entries. 
    
    1.6. Active Record knows how to update your schema along this timeline, bringing it from whatever point it is in the history to the latest version. 
    
    1.7. Active Record will also update your "db/schema.rb" file to match the up-to-date structure of your database.

    1.8. Rails keeps track of which files have been committed to the database and provides rollback features. 
    
    1.9. To actually create the table, you'd run 
    
        $ rails db:migrate 
        
            and; to roll it back, 
        
        $ rails db:rollback.

    NOTE : Note that in migrations we define the changes in forward direction.
           Migrations keep track of migration files that have been run or yet to run.
           You cannot execute a same migration file again. Unless you have rolled back that migration file.
           You cannot execute the migration again, Even if you have made changes in that file now.
           
           To run the migration again with changes :
                - Make changes
                - Rollback migration
                - Migrate the migrations again.

----------------------------------------------------------------------------------------------------------

2. Create Migration File :

    There are 3 ways through which we can create a migration file:
        - Generate Migration directly
        - Generate Model
        - Generat Migration with specific Type-/Modifiers Passed

    i.   Format of migration file is : "YYYYMMDDHHMMSS_migration_name_snake_cased.rb"
    ii.  In the genrate method you have to provide name in CamelCase format
    iii. A class of same CamalCase name will be in the migration. But the file name will contain snake_cased name of same class.

-------
    2.1 Creating / Generating Standalone Migrations : 

    - First we will drop the db so that all tables will be deleted that we created during ActiveRecord_Basics
        $ rails db:drop
        $ rails db:create

        2.1.1 CreateTable ---------------------------------->

            $ rails g migration CreateBooks name:string author:string isbn:integer
            >>
                invoke  active_record
                create    db/migrate/20220831095410_create_books.rb

                "db/migrate/20220831095410_create_books.rb"
            ------------------------------------------------------------------
            class CreateBooks < ActiveRecord::Migration[7.0]
                def change
                    create_table :books do |t|
                    t.string :name
                    t.string :author
                    t.integer :isbn

                    t.timestamps
                    end
                end
            end
            ---------------------------------------------------------------------

            SIMILARLY,

            $ rails g migration CreateStudents name:string roll_no:integer course:string contact_no:string

                "db/migrate/20220831095622_create_students.rb"
            --------------------------------------------------------------------
            class CreateStudents < ActiveRecord::Migration[7.0]
                def change
                    create_table :students do |t|
                        t.string :name
                        t.integer :roll_no
                        t.string :course
                        t.string :contact_no

                        t.timestamps
                    end
                end
            end
            --------------------------------------------------------------------


            $ rails g migration CreateIssuedBooks books:references

                "db/migrate/20220831095705_create_issued_books.rb"
            ----------------------------------------------------------------
            class CreateIssuedBooks < ActiveRecord::Migration[7.0]
                def change
                    create_table :issued_books do |t|
                        t.references :books, null: false, foreign_key: true

                        t.timestamps
                    end
                end
            end
            ----------------------------------------------------------------


        2.1.2 AddColumnToTable --------------------->

            $ rails g migration AddEditionToBooks
            >>
                invoke  active_record
                create    db/migrate/20220831084304_add_edition_to_blogs.rb

                "db/migrate/20220831084304_add_edition_to_books.rb"
            ----------------------------------------------------------
            class AddEditionToBooks < ActiveRecord::Migration[7.0]
                def change
                end
            end
            ----------------------------------------------------------

            - The name we used in the above generate command is a special name format:
                i.e., "AddColumnToTable" or "RemoveColumnFromTable"

                With these type of migration names we can generate "add_column" and "remove_column" migration statements automatically

            
            ----> Delete the above migration file first or use [--force ] in below generate command

            $ rails g migration AddEditionToBooks edition:string
            
                "db/migrate/20220831095842_add_edition_to_books.rb"
            ----------------------------------------------------------
            class AddEditionToBooks < ActiveRecord::Migration[7.0]
                def change
                    add_column :books, :edition, :string
                end
            end
            ----------------------------------------------------------
                - As you can see "add_column" is added automatically



        2.1.3 RemoveColumnFromTable ------->
            
            - Similarly, you can generate a migration to remove a column from the command line.


            $ rails g migration RemoveIsbnFromBooks isbn:string

                "db/migrate/20220831100052_remove_isbn_from_books"
            --------------------------------------------------------------
            class RemoveIsbnFromBooks < ActiveRecord::Migration[7.0]
                def change
                    remove_column :books, :isbn, :string
                end
            end
            --------------------------------------------------------------
        

        2.1.4 AddTableRefToTable

            $ rails g migration AddStudentsRefToIssuedBooks students:references

                "db/migrate/20220831100234_add_students_ref_to_issued_books.rb"
            --------------------------------------------------------------------------------
            class AddStudentsRefToIssuedBooks < ActiveRecord::Migration[7.0]
                def change
                    add_reference :issued_books, :students, null: false, foreign_key: true
                end
            end
            ----------------------------------------------------------------------------------
        
        2.1.5 CreateJoinTableName1Name2

            - There is also a generator which will produce join tables if JoinTable is part of the name:

        ------------------------------------------------------------------------------------------------------------
    
    2.2 Model Generators:

        - The model, resource, and scaffold generators:
            - will create migrations appropriate for adding a new model. 
            
        - This migration will already contain instructions for creating the relevant table. 
        
        - If you tell Rails what columns you want, then statements for adding these columns will also be created.

            $ rails g model Product name:string description:text

                * Will produce a migration file for CreateProduct containing code for:
                    "name"        column who has string d-type and;
                    "description" column who has text d-type

        ------------------------------------------------------------------------------------------------------------

    2.3 Passing Modifiers :

        - Some commonly used type modifiers can be passed directly on the command line.
        - They are enclosed by curly braces and follow the field type:

            $ rails g migration AddPercentageToStudents 'percentage:decimal{5,2}'

            "db/migrate/20220831103311_add_percentage_to_students.rb"
        -----------------------------------------------------------------------------------
            class AddPercentageToStudents < ActiveRecord::Migration[7.0]
                def change
                    add_column :students, :percentage, :decimal, precision: 5, scale: 2
                end
            end
        -----------------------------------------------------------------------------------
            
            ** You will learn more about Column-Type-Modifiers below. **

--------------------------------------------------------------------------------------------------------------------------

3. Writing Migrations :

    3.1. Creating a Table (create_table)

        - The create_table method is one of the most fundamental, but most of the time, will be generated for you from using a 
            model, resource, or scaffold generator.
        
        - A create_table command will automatically create a "id" column and set it as primary key.

            * Typical Create Table Example :

                ---------------------------
                create_table :books do |t|
                    t.string :name
                    t.integer :isbn
                end
                -------------------------

            * Example with various options :

                -----------------------------------------------------------
                create_table :books, options: "ENGINE=BLACKHOLE" do |t|
                end
                -----------------------------------------------------------
    
                    - options: is used to add any text or command in the end of sql that will be generated.


            * Constraints :

                -----------------------------------------------------
                create_table :books, id: false do |t|
    
                    t.integer :student_id, primary_key: true, null: false
                    
                    t.string :name, index: true, null: false
                    
                    t.string :email, index: {unique: true, name: "unique_email"}                
                end
                -----------------------------------------------------

                    - [id: false] will do not create id column in table
                    
            
            * Valid Values for index: 
                        :unique, :length, :order, :opclass, :where, :type, :using, :comment, :algorithm.


                        --> creating a temporary table for examples:

                            $ rails g migration CreateTempBooks name:string author:string isbn:integer 


 